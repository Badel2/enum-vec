var N = null;var searchIndex = {};
searchIndex["bit_set"]={"doc":"An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",N,N],[3,"Iter","","An iterator for `BitSet`.",N,N],[3,"Union","","",N,N],[3,"Intersection","","",N,N],[3,"Difference","","",N,N],[3,"SymmetricDifference","","",N,N],[11,"new","","Creates a new empty `BitSet`.",0,[[],["self"]]],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to hold `nbits` elements without resizing.",0,[[["usize"]],["self"]]],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,[[["bitvec"]],["self"]]],[11,"from_bytes","","",0,N],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",0,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements. In the case of `BitSet` this means reallocations will not occur as long as all inserted elements are less than `len`.",0,[[["self"],["usize"]]]],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,[[["self"]],["bitvec"]]],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,[[["self"]],["bitvec"]]],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,[[["self"]]]],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,[[["self"]],["iter"]]],[11,"union","","Iterator over each usize stored in `self` union `other`. See union_with for an efficient in-place version.",0,[[["self"],["self"]],["union"]]],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`. See intersect_with for an efficient in-place version.",0,[[["self"],["self"]],["intersection"]]],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`. See difference_with for an efficient in-place version.",0,[[["self"],["self"]],["difference"]]],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`. See symmetric_difference_with for an efficient in-place version.",0,[[["self"],["self"]],["symmetricdifference"]]],[11,"union_with","","Unions in-place with the specified other bit vector.",0,[[["self"],["self"]]]],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,[[["self"],["self"]]]],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector in-place.",0,[[["self"],["self"]]]],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other bit vector in-place.",0,[[["self"],["self"]]]],[11,"len","","Returns the number of set bits in this set.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether there are no bits set in this set",0,[[["self"]],["bool"]]],[11,"clear","","Clears all bits in this set",0,[[["self"]]]],[11,"contains","","Returns `true` if this set contains the specified integer.",0,[[["self"],["usize"]],["bool"]]],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",0,[[["self"],["self"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,[[["self"],["self"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,[[["self"],["self"]],["bool"]]],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already present in the set.",0,[[["self"],["usize"]],["bool"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",0,[[["self"],["usize"]],["bool"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"from_iter","","",0,[[["i"]],["self"]]],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",3,N],[11,"next","","",4,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",5,N],[11,"clone","","",0,[[["self"]],["self"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"clone","","",1,[[["self"]],["iter"]]],[11,"clone","","",2,[[["self"]],["union"]]],[11,"clone","","",3,[[["self"]],["intersection"]]],[11,"clone","","",4,[[["self"]],["difference"]]],[11,"clone","","",5,[[["self"]],["symmetricdifference"]]],[11,"default","","",0,[[],["self"]]]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["bit_vec"]={"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",N,N],[3,"Iter","","An iterator for `BitVec`.",N,N],[3,"IntoIter","","",N,N],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",N,N],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",N,N],[10,"bits","","How many bits it has",0,[[],["usize"]]],[11,"bytes","","How many bytes it has",0,[[],["usize"]]],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,[[["u8"]],["self"]]],[10,"count_ones","","Count the number of 1's in the bitwise repr",0,[[["self"]],["usize"]]],[10,"zero","","Get `0`",0,[[],["self"]]],[10,"one","","Get `1`",0,[[],["self"]]],[11,"new","","Creates an empty `BitVec`.",1,[[],["self"]]],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element to `bit`.",1,[[["usize"],["bool"]],["self"]]],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,[[["usize"]],["self"]]],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits, with the most significant bits of each byte coming first. Each bit becomes `true` if equal to 1 or `false` if equal to 0.",1,N],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index is `f(index)`.",1,[[["usize"],["f"]],["self"]]],[11,"blocks","","Iterator over the underlying blocks of data",1,[[["self"]],["blocks"]]],[11,"storage","","Exposes the raw block storage of this BitVec",1,N],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,[[["self"]],["vec"]]],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,[[["self"],["usize"]],["option",["bool"]]]],[11,"set","","Sets the value of a bit at an index `i`.",1,[[["self"],["usize"],["bool"]]]],[11,"set_all","","Sets all bits to 1.",1,[[["self"]]]],[11,"negate","","Flips all bits.",1,[[["self"]]]],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or` function.",1,[[["self"],["self"]],["bool"]]],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the bitwise `and` function.",1,[[["self"],["self"]],["bool"]]],[11,"difference","","Calculates the difference between two bitvectors.",1,[[["self"],["self"]],["bool"]]],[11,"all","","Returns `true` if all bits are 1.",1,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,[[["self"]],["iter"]]],[11,"none","","Returns `true` if all bits are 0.",1,[[["self"]],["bool"]]],[11,"any","","Returns `true` if any bit is 1.",1,[[["self"]],["bool"]]],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the `BitVec` becomes the high-order bit of the first byte. If the size of the `BitVec` is not a multiple of eight then trailing bits will be filled-in with `false`.",1,[[["self"]],["vec",["u8"]]]],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s. Both the `BitVec` and slice must have the same length.",1,N],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given `BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the given `BitVec`. Does nothing if the capacity is already sufficient.",1,[[["self"],["usize"]]]],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any element less than this amount will not trigger a resizing.",1,[[["self"]],["usize"]]],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,[[["self"],["usize"],["bool"]]]],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,[[["self"]],["option",["bool"]]]],[11,"push","","Pushes a `bool` onto the end.",1,[[["self"],["bool"]]]],[11,"len","","Returns the total number of bits in this vector",1,[[["self"]],["usize"]]],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,[[["self"],["usize"]]]],[11,"is_empty","","Returns true if there are no bits in this vector",1,[[["self"]],["bool"]]],[11,"clear","","Clears all bits in this vector.",1,[[["self"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the underlying storage as much as possible.",1,[[["self"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"index","","",1,[[["self"],["usize"]],["bool"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"into_iter","","",1,[[["self"]],["intoiter"]]],[11,"next_back","","",2,[[["self"]],["option",["bool"]]]],[11,"next_back","","",3,[[["self"]],["option",["bool"]]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",2,[[["self"]],["option",["bool"]]]],[11,"size_hint","","",2,N],[11,"next","","",3,[[["self"]],["option",["bool"]]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"clone","","",2,[[["self"]],["iter"]]],[11,"clone","","",4,[[["self"]],["blocks"]]],[11,"default","","",1,[[],["self"]]]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["enum_like"]={"doc":"This crate provides the `EnumLike` trait, which defines a mapping from a given type to `usize`.","items":[[3,"PackedU8","enum_like","Packs an `EnumLike` value into a `u8`, if possible",N,N],[3,"PackedU16","","Packs an `EnumLike` value into a `u16`, if possible",N,N],[3,"Values","","Iterator over the values (variants) of `T`",N,N],[8,"EnumLike","","The `EnumLike` trait specifies how a type will be stored inside the `EnumVec`.",N,N],[18,"NUM_VARIANTS","","The number of variants of this type",0,N],[10,"to_discr","","Convert type to discriminant",0,[[["self"]],["usize"]]],[10,"from_discr","","Get type instance from discriminant",0,[[["usize"]],["self"]]],[8,"EnumValues","","Helper trait to iterate over all the possible values of an enum. Note: you don't need to implement this trait, it is provided by `EnumLike`.",N,N],[11,"values","","Returns an iterator over the values of `Self`",1,[[],["values"]]],[11,"new","","Packs `T` into 8 bits. If it is not possible, error at compile time.",2,[[["t"]],["self"]]],[11,"get","","Return the packed value",2,[[["self"]],["t"]]],[11,"new","","Packs `T` into 16 bits. If it is not possible, error at compile time.",3,[[["t"]],["self"]]],[11,"get","","Return the packed value",3,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"clone","","",2,[[["self"]],["packedu8"]]],[11,"clone","","",3,[[["self"]],["packedu16"]]],[11,"clone","","",4,[[["self"]],["values"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"count","","",4,[[["self"]],["usize"]]],[11,"last","","",4,[[["self"]],["option"]]],[11,"nth","","",4,[[["self"],["usize"]],["option"]]],[11,"partial_cmp","","",2,[[["self"],["packedu8"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"le","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"gt","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"ge","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["packedu16"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"le","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"gt","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"ge","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"eq","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"ne","","",2,[[["self"],["packedu8"]],["bool"]]],[11,"eq","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"ne","","",3,[[["self"],["packedu16"]],["bool"]]],[11,"cmp","","",2,[[["self"],["packedu8"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["packedu16"]],["ordering"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,N],[11,"hash","","",3,N]],"paths":[[8,"EnumLike"],[8,"EnumValues"],[3,"PackedU8"],[3,"PackedU16"],[3,"Values"]]};
searchIndex["enum_like_derive"]={"doc":"Procedural macro implementing `#[derive(EnumLike)]`","items":[[24,"EnumLike","enum_like_derive","Function that implements the `#[derive(EnumLike)]` proc macro",N,N]],"paths":[]};
searchIndex["enum_set2"]={"doc":"A set for enum variants","items":[[3,"EnumSet","enum_set2","A `BitSet` indexed by an `EnumLike` type.",N,N],[3,"WrapIter","","Wraps an iterator from the `bit-set` crate, mapping the output from `usize` to `E: EnumLike`.",N,N],[6,"Iter","","Iterator over the `&EnumSet`",N,N],[6,"Union","","Iterator over the `&EnumSet`",N,N],[6,"Intersection","","Iterator over the `&EnumSet`",N,N],[6,"Difference","","Iterator over the `&EnumSet`",N,N],[6,"SymmetricDifference","","Iterator over the `&EnumSet`",N,N],[11,"into_bit_set","","Returns the inner `BitSet`.",0,[[["self"]],["bitset"]]],[11,"get_ref","","Returns a reference to the inner `BitSet`.",0,[[["self"]],["bitset"]]],[11,"from_bit_set","","Constructs an `EnumSet` from a `BitSet`.",0,[[["bitset"]],["self"]]],[11,"new","","Creates a new `EnumSet`.",0,[[],["self"]]],[11,"shrink_to_fit","","Attemps to minimalize the memory usage of the inner `BitSet`.",0,[[["self"]]]],[11,"iter","","Iterator over each element in the set.",0,[[["self"]],["wrapiter",["iter"]]]],[11,"union","","Iterator over each element in `set || other`.",0,[[["self"],["self"]],["union"]]],[11,"intersection","","Iterator over each element in `set && other`.",0,[[["self"],["self"]],["intersection"]]],[11,"difference","","Iterator over each element in `set - other`.",0,[[["self"],["self"]],["difference"]]],[11,"symmetric_difference","","Iterator over each element in `set ^ other`.",0,[[["self"],["self"]],["symmetricdifference"]]],[11,"union_with","","Computes the union with the other set, in-place.",0,[[["self"],["self"]]]],[11,"intersect_with","","Computes the intersection with the other set, in-place.",0,[[["self"],["self"]]]],[11,"difference_with","","Computes the difference with the other set, in-place.",0,[[["self"],["self"]]]],[11,"symmetric_difference_with","","Computes the symmetric difference with the other set, in-place.",0,[[["self"],["self"]]]],[11,"len","","Returns the number of elements in the set.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are no elements in the set.",0,[[["self"]],["bool"]]],[11,"clear","","Clears all elements in the set.",0,[[["self"]]]],[11,"contains","","Returns `true` if the set contains this value.",0,[[["self"],["e"]],["bool"]]],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.",0,[[["self"],["self"]],["bool"]]],[11,"is_subset","","Returns `true` if the set has no elements in common with `other`.",0,[[["self"],["self"]],["bool"]]],[11,"is_superset","","Returns `true` if the set has no elements in common with `other`.",0,[[["self"],["self"]],["bool"]]],[11,"insert","","Returns `true` if the value was not already present in the set",0,[[["self"],["e"]],["bool"]]],[11,"remove","","Returns `true` if the value was already present in the set",0,[[["self"],["e"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["enumset"]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"partial_cmp","","",0,[[["self"],["enumset"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["enumset"]],["bool"]]],[11,"le","","",0,[[["self"],["enumset"]],["bool"]]],[11,"gt","","",0,[[["self"],["enumset"]],["bool"]]],[11,"ge","","",0,[[["self"],["enumset"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["enumset"]],["bool"]]],[11,"ne","","",0,[[["self"],["enumset"]],["bool"]]],[11,"cmp","","",0,[[["self"],["enumset"]],["ordering"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"from_iter","","",0,[[["i"]],["self"]]]],"paths":[[3,"EnumSet"],[3,"WrapIter"]]};
searchIndex["enum_vec"]={"doc":"A vector which efficiently stores enum variants.","items":[[8,"EnumLike","enum_vec","The `EnumLike` trait specifies how a type will be stored inside the `EnumVec`.",N,N],[18,"NUM_VARIANTS","","The number of variants of this type",0,N],[10,"to_discr","","Convert type to discriminant",0,[[["self"]],["usize"]]],[10,"from_discr","","Get type instance from discriminant",0,[[["usize"]],["self"]]],[3,"PackedU8","","Packs an `EnumLike` value into a `u8`, if possible",N,N],[3,"PackedU16","","Packs an `EnumLike` value into a `u16`, if possible",N,N],[8,"EnumValues","","Helper trait to iterate over all the possible values of an enum. Note: you don't need to implement this trait, it is provided by `EnumLike`.",N,N],[11,"values","","Returns an iterator over the values of `Self`",1,[[],["values"]]],[3,"Values","","Iterator over the values (variants) of `T`",N,N],[0,"vec_u8","","Alternative implementation of `EnumVec` with `Vec<u8>` storage.",N,N],[3,"EnumVec","enum_vec::vec_u8","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",2,[[],["self"]]],[11,"with_capacity","","",2,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",2,[[["self"]],["usize"]]],[11,"get","","",2,[[["self"],["usize"]],["option"]]],[11,"set","","",2,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",2,[[["self"]]]],[11,"truncate","","",2,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",2,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",2,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"],["t"]]]],[11,"pop","","",2,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",2,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",2,[[["self"]],["usize"]]],[11,"set_len","","",2,[[["self"],["usize"]]]],[11,"is_empty","","",2,[[["self"]],["bool"]]],[11,"split_off","","",2,[[["self"],["usize"]],["self"]]],[11,"resize","","",2,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",2,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",2,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",2,[[["self"],["usize"],["usize"]]]],[11,"iter","","",2,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"]],["vec"]]],[11,"from_elem","","",2,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",2,N],[11,"storage","","Access the internal storage ``` use enum_vec::vec_u8::EnumVec;",2,[[["self"]],["vec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u8::EnumVec;",2,[[["self"]],["vec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u8::EnumVec;",2,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u8::EnumVec;",2,[[["self"],["t"]],["bool"]]],[0,"vec_u16","enum_vec","Alternative implementation of `EnumVec` with `Vec<u16>` storage.",N,N],[3,"EnumVec","enum_vec::vec_u16","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",3,[[],["self"]]],[11,"with_capacity","","",3,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",3,[[["self"]],["usize"]]],[11,"get","","",3,[[["self"],["usize"]],["option"]]],[11,"set","","",3,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",3,[[["self"]]]],[11,"truncate","","",3,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",3,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",3,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"],["t"]]]],[11,"pop","","",3,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",3,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",3,[[["self"]],["usize"]]],[11,"set_len","","",3,[[["self"],["usize"]]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"split_off","","",3,[[["self"],["usize"]],["self"]]],[11,"resize","","",3,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",3,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",3,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",3,[[["self"],["usize"],["usize"]]]],[11,"iter","","",3,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"]],["vec"]]],[11,"from_elem","","",3,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",3,N],[11,"storage","","Access the internal storage ``` use enum_vec::vec_u16::EnumVec;",3,[[["self"]],["vec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u16::EnumVec;",3,[[["self"]],["vec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u16::EnumVec;",3,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u16::EnumVec;",3,[[["self"],["t"]],["bool"]]],[0,"vec_u32","enum_vec","Default `EnumVec` with `Vec<u32>` storage.",N,N],[3,"EnumVec","enum_vec::vec_u32","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",4,[[],["self"]]],[11,"with_capacity","","",4,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",4,[[["self"]],["usize"]]],[11,"get","","",4,[[["self"],["usize"]],["option"]]],[11,"set","","",4,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",4,[[["self"]]]],[11,"truncate","","",4,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",4,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",4,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"],["t"]]]],[11,"pop","","",4,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",4,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",4,[[["self"]],["usize"]]],[11,"set_len","","",4,[[["self"],["usize"]]]],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"split_off","","",4,[[["self"],["usize"]],["self"]]],[11,"resize","","",4,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",4,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",4,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",4,[[["self"],["usize"],["usize"]]]],[11,"iter","","",4,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"]],["vec"]]],[11,"from_elem","","",4,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",4,N],[11,"storage","","Access the internal storage ``` use enum_vec::vec_u32::EnumVec;",4,[[["self"]],["vec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u32::EnumVec;",4,[[["self"]],["vec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u32::EnumVec;",4,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u32::EnumVec;",4,[[["self"],["t"]],["bool"]]],[0,"vec_u64","enum_vec","Alternative implementation of `EnumVec` with `Vec<u64>` storage.",N,N],[3,"EnumVec","enum_vec::vec_u64","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",5,[[],["self"]]],[11,"with_capacity","","",5,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",5,[[["self"]],["usize"]]],[11,"get","","",5,[[["self"],["usize"]],["option"]]],[11,"set","","",5,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",5,[[["self"]]]],[11,"truncate","","",5,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",5,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",5,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"],["t"]]]],[11,"pop","","",5,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",5,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",5,[[["self"]],["usize"]]],[11,"set_len","","",5,[[["self"],["usize"]]]],[11,"is_empty","","",5,[[["self"]],["bool"]]],[11,"split_off","","",5,[[["self"],["usize"]],["self"]]],[11,"resize","","",5,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",5,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",5,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",5,[[["self"],["usize"],["usize"]]]],[11,"iter","","",5,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"]],["vec"]]],[11,"from_elem","","",5,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",5,N],[11,"storage","","Access the internal storage ``` use enum_vec::vec_u64::EnumVec;",5,[[["self"]],["vec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u64::EnumVec;",5,[[["self"]],["vec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u64::EnumVec;",5,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u64::EnumVec;",5,[[["self"],["t"]],["bool"]]],[0,"vec_u128","enum_vec","Alternative implementation of `EnumVec` with `Vec<u128>` storage.",N,N],[3,"EnumVec","enum_vec::vec_u128","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",6,[[],["self"]]],[11,"with_capacity","","",6,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",6,[[["self"]],["usize"]]],[11,"get","","",6,[[["self"],["usize"]],["option"]]],[11,"set","","",6,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",6,[[["self"]]]],[11,"truncate","","",6,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",6,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",6,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"],["t"]]]],[11,"pop","","",6,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",6,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",6,[[["self"]],["usize"]]],[11,"set_len","","",6,[[["self"],["usize"]]]],[11,"is_empty","","",6,[[["self"]],["bool"]]],[11,"split_off","","",6,[[["self"],["usize"]],["self"]]],[11,"resize","","",6,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",6,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",6,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",6,[[["self"],["usize"],["usize"]]]],[11,"iter","","",6,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"]],["vec"]]],[11,"from_elem","","",6,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",6,N],[11,"storage","","Access the internal storage ``` use enum_vec::vec_u128::EnumVec;",6,[[["self"]],["vec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u128::EnumVec;",6,[[["self"]],["vec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u128::EnumVec;",6,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::vec_u128::EnumVec;",6,[[["self"],["t"]],["bool"]]],[0,"smallvec_u32","enum_vec","`SmallEnumVec`",N,N],[3,"EnumVec","enum_vec::smallvec_u32","A vector which efficiently stores enum variants.",N,N],[3,"EnumVecIter","","Iterator over &EnumVec",N,N],[3,"EnumVecIntoIter","","Iterator over EnumVec",N,N],[6,"BitVec","","Alias for `EnumVec<bool>`",N,N],[11,"new","","",7,[[],["self"]]],[11,"with_capacity","","",7,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that can be hold without allocating new memory.",7,[[["self"]],["usize"]]],[11,"get","","",7,[[["self"],["usize"]],["option"]]],[11,"set","","",7,[[["self"],["usize"],["t"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements. ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity as much as possible.",7,[[["self"]]]],[11,"truncate","","",7,[[["self"],["usize"]]]],[11,"swap_remove","","Remove an element from an arbitrary position in O(1) time, but without preserving the ordering. This is accomplished by swapping the desired element with the last element, and then calling `pop()`. ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert an element into an arbitrary position. This operation is very expensive, as it must shift all the elements to make space for the new one. Prefer using `push()`.",7,[[["self"],["usize"],["t"]]]],[11,"remove","","Remove an element from an arbitrary position. This operation is very expensive, as it must shift all the elements to fill the hole. When preserving the order is not important, consider using `swap_remove()`.",7,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["f"]]]],[11,"push","","Push an element to the end of the vector. ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["t"]]]],[11,"pop","","",7,[[["self"]],["option"]]],[11,"append","","Appends all the elements from `other` into `self`, leaving `other` empty. This can be more efficient than using `extend` when the internal storage is block-aligned. For example when each element is 4-bits wide and the storage is a u32, it is block-aligned when it has 8*k elements. Also, it doesn't have to map all the elements from `T` to discr.",7,[[["self"],["self"]]]],[11,"clear","","Sets the length to zero, removing all the elements. ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"]]]],[11,"len","","Returns the length of the vector, the number of elements it holds.",7,[[["self"]],["usize"]]],[11,"set_len","","",7,[[["self"],["usize"]]]],[11,"is_empty","","",7,[[["self"]],["bool"]]],[11,"split_off","","",7,[[["self"],["usize"]],["self"]]],[11,"resize","","",7,[[["self"],["usize"],["t"]]]],[11,"get_raw_unchecked","","Get the raw discriminant without bounds checking",7,[[["self"],["usize"]],["usize"]]],[11,"set_raw_unchecked","","Set the raw discriminant without bounds checking. It is assumed that the discriminant is lower than `T::NUM_ELEMENTS`.",7,[[["self"],["usize"],["usize"]]]],[11,"swap","","Swap two elements.",7,[[["self"],["usize"],["usize"]]]],[11,"iter","","",7,[[["self"]],["enumveciter"]]],[11,"for_each","","Apply a function to each element in place, this is a substitute to for loops: ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["f"]]]],[11,"to_vec","","Copies `self` into a plain `Vec`. ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"]],["vec"]]],[11,"from_elem","","",7,[[["t"],["usize"]],["self"]]],[11,"from_slice","","",7,N],[11,"storage","","Access the internal storage ``` use enum_vec::smallvec_u32::EnumVec;",7,[[["self"]],["smallvec"]]],[11,"storage_mut","","Access and modify the internal storage. This function is unsafe because shrinking the storage may lead to reading and writing uninitialized memory. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::smallvec_u32::EnumVec;",7,[[["self"]],["smallvec"]]],[11,"any","","Check whether any of the elements is equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["t"]],["bool"]]],[11,"all","","Check whether all of the elements are equal to `x`. This method uses arcane bithack magic to test many elements at once. ``` extern crate enum_like; extern crate enum_vec; use enum_like::EnumLike; use enum_vec::smallvec_u32::EnumVec;",7,[[["self"],["t"]],["bool"]]],[14,"enum_vec","enum_vec","",N,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"into_iter","","",10,[[["self"]],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","enum_vec::vec_u8","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"into_iter","","",11,[[["self"]],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","enum_vec::vec_u16","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"into_iter","","",14,[[["self"]],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"from","enum_vec::vec_u32","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"into_iter","","",15,[[["self"]],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from","enum_vec::vec_u64","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from","enum_vec::vec_u128","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"into_iter","","",20,[[["self"]],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from","enum_vec::smallvec_u32","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"into_iter","","",21,[[["self"]],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"into_iter","","",22,[[["self"]],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"eq","enum_vec","",8,[[["self"],["packedu8"]],["bool"]]],[11,"ne","","",8,[[["self"],["packedu8"]],["bool"]]],[11,"eq","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"ne","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"clone","","",9,[[["self"]],["packedu16"]]],[11,"clone","","",10,[[["self"]],["values"]]],[11,"clone","","",8,[[["self"]],["packedu8"]]],[11,"cmp","","",8,[[["self"],["packedu8"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["packedu16"]],["ordering"]]],[11,"partial_cmp","","",9,[[["self"],["packedu16"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"le","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"gt","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"ge","","",9,[[["self"],["packedu16"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["packedu8"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["packedu8"]],["bool"]]],[11,"le","","",8,[[["self"],["packedu8"]],["bool"]]],[11,"gt","","",8,[[["self"],["packedu8"]],["bool"]]],[11,"ge","","",8,[[["self"],["packedu8"]],["bool"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"count","","",10,[[["self"]],["usize"]]],[11,"last","","",10,[[["self"]],["option"]]],[11,"nth","","",10,[[["self"],["usize"]],["option"]]],[11,"hash","","",8,N],[11,"hash","","",9,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","enum_vec::vec_u8","",2,[[["self"]],["enumvec"]]],[11,"clone","enum_vec::vec_u16","",3,[[["self"]],["enumvec"]]],[11,"clone","enum_vec::vec_u32","",4,[[["self"]],["enumvec"]]],[11,"clone","enum_vec::vec_u64","",5,[[["self"]],["enumvec"]]],[11,"clone","enum_vec::vec_u128","",6,[[["self"]],["enumvec"]]],[11,"clone","enum_vec::smallvec_u32","",7,[[["self"]],["enumvec"]]],[11,"extend","enum_vec::vec_u8","",2,[[["self"],["i"]]]],[11,"extend","enum_vec::vec_u16","",3,[[["self"],["i"]]]],[11,"extend","enum_vec::vec_u32","",4,[[["self"],["i"]]]],[11,"extend","enum_vec::vec_u64","",5,[[["self"],["i"]]]],[11,"extend","enum_vec::vec_u128","",6,[[["self"],["i"]]]],[11,"extend","enum_vec::smallvec_u32","",7,[[["self"],["i"]]]],[11,"from","enum_vec::vec_u8","",2,[[["vec"]],["self"]]],[11,"from","enum_vec::vec_u16","",3,[[["vec"]],["self"]]],[11,"from","enum_vec::vec_u32","",4,[[["vec"]],["self"]]],[11,"from","enum_vec::vec_u64","",5,[[["vec"]],["self"]]],[11,"from","enum_vec::vec_u128","",6,[[["vec"]],["self"]]],[11,"from","enum_vec::smallvec_u32","",7,[[["vec"]],["self"]]],[11,"into","enum_vec::vec_u8","",2,[[["self"]],["vec"]]],[11,"into","enum_vec::vec_u16","",3,[[["self"]],["vec"]]],[11,"into","enum_vec::vec_u32","",4,[[["self"]],["vec"]]],[11,"into","enum_vec::vec_u64","",5,[[["self"]],["vec"]]],[11,"into","enum_vec::vec_u128","",6,[[["self"]],["vec"]]],[11,"into","enum_vec::smallvec_u32","",7,[[["self"]],["vec"]]],[11,"next","enum_vec::vec_u8","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"count","","",11,[[["self"]],["usize"]]],[11,"nth","","",11,[[["self"],["usize"]],["option"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"count","","",12,[[["self"]],["usize"]]],[11,"nth","","",12,[[["self"],["usize"]],["option"]]],[11,"next","enum_vec::vec_u16","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"count","","",13,[[["self"]],["usize"]]],[11,"nth","","",13,[[["self"],["usize"]],["option"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"count","","",14,[[["self"]],["usize"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"next","enum_vec::vec_u32","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"count","","",15,[[["self"]],["usize"]]],[11,"nth","","",15,[[["self"],["usize"]],["option"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"next","enum_vec::vec_u64","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"count","","",17,[[["self"]],["usize"]]],[11,"nth","","",17,[[["self"],["usize"]],["option"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"count","","",18,[[["self"]],["usize"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"next","enum_vec::vec_u128","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"nth","","",19,[[["self"],["usize"]],["option"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"count","","",20,[[["self"]],["usize"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"next","enum_vec::smallvec_u32","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,N],[11,"count","","",21,[[["self"]],["usize"]]],[11,"nth","","",21,[[["self"],["usize"]],["option"]]],[11,"next","","",22,[[["self"]],["option"]]],[11,"size_hint","","",22,N],[11,"count","","",22,[[["self"]],["usize"]]],[11,"nth","","",22,[[["self"],["usize"]],["option"]]],[11,"default","enum_vec::vec_u8","",2,[[],["self"]]],[11,"default","enum_vec::vec_u16","",3,[[],["self"]]],[11,"default","enum_vec::vec_u32","",4,[[],["self"]]],[11,"default","enum_vec::vec_u64","",5,[[],["self"]]],[11,"default","enum_vec::vec_u128","",6,[[],["self"]]],[11,"default","enum_vec::smallvec_u32","",7,[[],["self"]]],[11,"eq","enum_vec::vec_u8","",2,[[["self"],["enumvec"]],["bool"]]],[11,"eq","enum_vec::vec_u16","",3,[[["self"],["enumvec"]],["bool"]]],[11,"eq","enum_vec::vec_u32","",4,[[["self"],["enumvec"]],["bool"]]],[11,"eq","enum_vec::vec_u64","",5,[[["self"],["enumvec"]],["bool"]]],[11,"eq","enum_vec::vec_u128","",6,[[["self"],["enumvec"]],["bool"]]],[11,"eq","enum_vec::smallvec_u32","",7,[[["self"],["enumvec"]],["bool"]]],[11,"next_back","enum_vec::vec_u8","",11,[[["self"]],["option"]]],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"next_back","enum_vec::vec_u16","",13,[[["self"]],["option"]]],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"next_back","enum_vec::vec_u32","",15,[[["self"]],["option"]]],[11,"next_back","","",16,[[["self"]],["option"]]],[11,"next_back","enum_vec::vec_u64","",17,[[["self"]],["option"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"next_back","enum_vec::vec_u128","",19,[[["self"]],["option"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"next_back","enum_vec::smallvec_u32","",21,[[["self"]],["option"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"into_iter","enum_vec::vec_u8","",2,N],[11,"into_iter","enum_vec::vec_u16","",3,N],[11,"into_iter","enum_vec::vec_u32","",4,N],[11,"into_iter","enum_vec::vec_u64","",5,N],[11,"into_iter","enum_vec::vec_u128","",6,N],[11,"into_iter","enum_vec::smallvec_u32","",7,N],[11,"fmt","enum_vec::vec_u8","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","enum_vec::vec_u16","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","enum_vec::vec_u32","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","enum_vec::vec_u64","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","enum_vec::vec_u128","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","enum_vec::smallvec_u32","",7,[[["self"],["formatter"]],["result"]]],[11,"hash","enum_vec::vec_u8","",2,[[["self"],["h"]]]],[11,"hash","enum_vec::vec_u16","",3,[[["self"],["h"]]]],[11,"hash","enum_vec::vec_u32","",4,[[["self"],["h"]]]],[11,"hash","enum_vec::vec_u64","",5,[[["self"],["h"]]]],[11,"hash","enum_vec::vec_u128","",6,[[["self"],["h"]]]],[11,"hash","enum_vec::smallvec_u32","",7,[[["self"],["h"]]]],[11,"from_iter","enum_vec::vec_u8","",2,[[["i"]],["self"]]],[11,"from_iter","enum_vec::vec_u16","",3,[[["i"]],["self"]]],[11,"from_iter","enum_vec::vec_u32","",4,[[["i"]],["self"]]],[11,"from_iter","enum_vec::vec_u64","",5,[[["i"]],["self"]]],[11,"from_iter","enum_vec::vec_u128","",6,[[["i"]],["self"]]],[11,"from_iter","enum_vec::smallvec_u32","",7,[[["i"]],["self"]]],[11,"new","enum_vec","Packs `T` into 8 bits. If it is not possible, error at compile time.",8,[[["t"]],["packedu8"]]],[11,"value","","Return the packed value",8,[[["self"]],["t"]]],[11,"new","","Packs `T` into 16 bits. If it is not possible, error at compile time.",9,[[["t"]],["packedu16"]]],[11,"value","","Return the packed value",9,[[["self"]],["t"]]]],"paths":[[8,"EnumLike"],[8,"EnumValues"],[3,"EnumVec"],[3,"EnumVec"],[3,"EnumVec"],[3,"EnumVec"],[3,"EnumVec"],[3,"EnumVec"],[3,"PackedU8"],[3,"PackedU16"],[3,"Values"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"],[3,"EnumVecIter"],[3,"EnumVecIntoIter"]]};
searchIndex["example"]={"doc":"","items":[],"paths":[]};
searchIndex["proc_macro2"]={"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",N,N],[3,"LexError","","",N,N],[3,"Span","","",N,N],[3,"TokenTree","","",N,N],[12,"span","","",0,N],[12,"kind","","",0,N],[3,"Term","","",N,N],[3,"Literal","","",N,N],[3,"TokenTreeIter","","",N,N],[4,"TokenNode","","",N,N],[13,"Group","","",1,N],[13,"Term","","",1,N],[13,"Op","","",1,N],[13,"Literal","","",1,N],[4,"Delimiter","","",N,N],[13,"Parenthesis","","",2,N],[13,"Brace","","",2,N],[13,"Bracket","","",2,N],[13,"None","","",2,N],[4,"Spacing","","",N,N],[13,"Alone","","",3,N],[13,"Joint","","",3,N],[11,"empty","","",4,[[],["tokenstream"]]],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"call_site","","",5,[[],["span"]]],[11,"def_site","","",5,[[],["span"]]],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",5,[[["self"],["span"]],["span"]]],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",5,[[["self"],["span"]],["span"]]],[11,"intern","","",6,[[["str"]],["term"]]],[11,"as_str","","",6,[[["self"]],["str"]]],[11,"integer","","",7,[[["i64"]],["literal"]]],[11,"u8","","",7,[[["u8"]],["literal"]]],[11,"u16","","",7,[[["u16"]],["literal"]]],[11,"u32","","",7,[[["u32"]],["literal"]]],[11,"u64","","",7,[[["u64"]],["literal"]]],[11,"usize","","",7,[[["usize"]],["literal"]]],[11,"i8","","",7,[[["i8"]],["literal"]]],[11,"i16","","",7,[[["i16"]],["literal"]]],[11,"i32","","",7,[[["i32"]],["literal"]]],[11,"i64","","",7,[[["i64"]],["literal"]]],[11,"isize","","",7,[[["isize"]],["literal"]]],[11,"float","","",7,[[["f64"]],["literal"]]],[11,"f64","","",7,[[["f64"]],["literal"]]],[11,"f32","","",7,[[["f32"]],["literal"]]],[11,"string","","",7,[[["str"]],["literal"]]],[11,"character","","",7,[[["char"]],["literal"]]],[11,"byte_string","","",7,N],[11,"byte_char","","",7,[[["u8"]],["literal"]]],[11,"doccomment","","",7,[[["str"]],["literal"]]],[11,"raw_string","","",7,[[["str"],["usize"]],["literal"]]],[11,"raw_byte_string","","",7,[[["str"],["usize"]],["literal"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"clone","","",4,[[["self"]],["tokenstream"]]],[11,"clone","","",5,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",1,[[["self"]],["tokennode"]]],[11,"clone","","",2,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["term"]]],[11,"clone","","",3,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"from","","",4,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",4,[[["tokentree"]],["tokenstream"]]],[11,"from","","",0,[[["tokennode"]],["tokentree"]]],[11,"next","","",9,[[["self"]],["option",["tokentree"]]]],[11,"eq","","",2,[[["self"],["delimiter"]],["bool"]]],[11,"eq","","",3,[[["self"],["spacing"]],["bool"]]],[11,"into_iter","","",4,[[["self"]],["tokentreeiter"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",4,[[["str"]],["result",["tokenstream","lexerror"]]]],[11,"from_iter","","",4,[[["i"]],["self"]]]],"paths":[[3,"TokenTree"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Term"],[3,"Literal"],[3,"LexError"],[3,"TokenTreeIter"]]};
searchIndex["quote"]={"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",N,N],[11,"new","","Empty tokens.",0,[[],["self"]]],[11,"append","","For use by `ToTokens` implementations.",0,[[["self"],["u"]]]],[11,"append_all","","For use by `ToTokens` implementations.",0,[[["self"],["i"]]]],[11,"append_separated","","For use by `ToTokens` implementations.",0,[[["self"],["i"],["u"]]]],[11,"append_terminated","","For use by `ToTokens` implementations.",0,[[["self"],["i"],["u"]]]],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",N,N],[10,"to_tokens","","Write `self` to the given `Tokens`.",1,[[["self"],["tokens"]]]],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,[[["self"]],["tokens"]]],[14,"quote","","The whole point.",N,N],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"to_tokens","","",0,[[["self"],["tokens"]]]],[11,"into_tokens","","",0,[[["self"]],["tokens"]]],[11,"clone","","",0,[[["self"]],["tokens"]]],[11,"default","","",0,[[],["tokens"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"into_iter","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,[[["self"]],["tokens"]]]],"paths":[[3,"Tokens"],[8,"ToTokens"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"new","","Construct an empty vector",3,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",3,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",3,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",3,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",3,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",3,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",3,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",3,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",3,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",3,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",3,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",3,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",3,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",3,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",3,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity for `additional` more elements to be inserted.",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",3,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",3,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",3,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",3,N],[11,"clear","","Remove all elements from the vector.",3,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",3,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",3,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",3,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",3,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",3,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",3,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",3,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",3,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",3,[[["self"],["f"]]]],[11,"from_raw_parts","","Creates a `SmallVec` directly from the raw components of another `SmallVec`.",3,N],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",3,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",3,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",3,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",3,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",3,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"push","","",3,N],[11,"extend_from_slice","","",3,N],[11,"clone","","",3,[[["self"]],["smallvec"]]],[11,"extend","","",3,[[["self"],["i"]]]],[11,"from","","",3,N],[11,"from","","",3,[[["vec"]],["smallvec"]]],[11,"from","","",3,[[["a"]],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"as_ref","","",3,N],[11,"partial_cmp","","",3,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"default","","",3,[[],["smallvec"]]],[11,"as_mut","","",3,N],[11,"eq","","",3,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",3,[[["self"],["smallvec"]],["bool"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",3,N],[11,"cmp","","",3,[[["self"],["smallvec"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"deref","","",3,N],[11,"deref_mut","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"index_mut","","",3,N],[11,"hash","","",3,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["i"]],["smallvec"]]],[11,"borrow","","",3,N],[11,"write","","",3,N],[11,"write_all","","",3,N],[11,"flush","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"SmallVec"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["syn"]={"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",N,N],[12,"pound_token","","",0,N],[12,"style","","",0,N],[12,"bracket_token","","",0,N],[12,"path","","",0,N],[12,"tts","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",N,N],[12,"ident","","",1,N],[12,"paren_token","","",1,N],[12,"nested","","",1,N],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",N,N],[12,"ident","","",2,N],[12,"eq_token","","",2,N],[12,"lit","","",2,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"attrs","","Attributes tagged on the field.",3,N],[12,"vis","","Visibility of the field.",3,N],[12,"ident","","Name of the field, if any.",3,N],[12,"colon_token","","",3,N],[12,"ty","","Type of the field.",3,N],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",N,N],[12,"brace_token","","",4,N],[12,"named","","",4,N],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",N,N],[12,"paren_token","","",5,N],[12,"unnamed","","",5,N],[3,"Variant","","An enum variant.",N,N],[12,"attrs","","Attributes tagged on the variant.",6,N],[12,"ident","","Name of the variant.",6,N],[12,"fields","","Content stored in the variant.",6,N],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,N],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",N,N],[12,"pub_token","","",7,N],[12,"paren_token","","",7,N],[12,"crate_token","","",7,N],[3,"VisPublic","","A public visibility level: `pub`.",N,N],[12,"pub_token","","",8,N],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",N,N],[12,"pub_token","","",9,N],[12,"paren_token","","",9,N],[12,"in_token","","",9,N],[12,"path","","",9,N],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",N,N],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",N,N],[3,"ExprAssign","","An assignment expression: `a = compute()`.",N,N],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",N,N],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",N,N],[12,"attrs","","",10,N],[12,"left","","",10,N],[12,"op","","",10,N],[12,"right","","",10,N],[3,"ExprBlock","","A blocked scope: `{ ... }`.",N,N],[3,"ExprBox","","A box expression: `box f`.",N,N],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",N,N],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",N,N],[12,"attrs","","",11,N],[12,"func","","",11,N],[12,"paren_token","","",11,N],[12,"args","","",11,N],[3,"ExprCast","","A cast expression: `foo as f64`.",N,N],[12,"attrs","","",12,N],[12,"expr","","",12,N],[12,"as_token","","",12,N],[12,"ty","","",12,N],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",N,N],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",N,N],[3,"ExprContinue","","A `continue`, with an optional label.",N,N],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",N,N],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",N,N],[3,"ExprGroup","","An expression contained within invisible delimiters.",N,N],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",N,N],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",N,N],[3,"ExprInPlace","","A placement expression: `place <- value`.",N,N],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",N,N],[12,"attrs","","",13,N],[12,"expr","","",13,N],[12,"bracket_token","","",13,N],[12,"index","","",13,N],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",N,N],[12,"attrs","","",14,N],[12,"lit","","",14,N],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",N,N],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",N,N],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",N,N],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",N,N],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",N,N],[12,"attrs","","",15,N],[12,"paren_token","","",15,N],[12,"expr","","",15,N],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",N,N],[12,"attrs","","",16,N],[12,"qself","","",16,N],[12,"path","","",16,N],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",N,N],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",N,N],[3,"ExprReturn","","A `return`, with an optional value to be returned.",N,N],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",N,N],[3,"ExprTry","","A try-expression: `expr?`.",N,N],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",N,N],[3,"ExprType","","A type ascription expression: `foo: f64`.",N,N],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",N,N],[12,"attrs","","",17,N],[12,"op","","",17,N],[12,"expr","","",17,N],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",N,N],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",N,N],[12,"tts","","",18,N],[3,"ExprWhile","","A while loop: `while expr { ... }`.",N,N],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",N,N],[3,"ExprYield","","A yield expression: `yield expr`.",N,N],[3,"Index","","The index of an unnamed tuple struct field.",N,N],[12,"index","","",19,N],[12,"span","","",19,N],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",N,N],[12,"for_token","","",20,N],[12,"lt_token","","",20,N],[12,"lifetimes","","",20,N],[12,"gt_token","","",20,N],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",N,N],[12,"attrs","","",21,N],[12,"const_token","","",21,N],[12,"ident","","",21,N],[12,"colon_token","","",21,N],[12,"ty","","",21,N],[12,"eq_token","","",21,N],[12,"default","","",21,N],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lt_token","","",22,N],[12,"params","","",22,N],[12,"gt_token","","",22,N],[12,"where_clause","","",22,N],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",N,N],[12,"attrs","","",23,N],[12,"lifetime","","",23,N],[12,"colon_token","","",23,N],[12,"bounds","","",23,N],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",N,N],[12,"lhs_ty","","",24,N],[12,"eq_token","","",24,N],[12,"rhs_ty","","",24,N],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",N,N],[12,"lifetime","","",25,N],[12,"colon_token","","",25,N],[12,"bounds","","",25,N],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",N,N],[12,"lifetimes","","Any lifetimes from a `for` binding",26,N],[12,"bounded_ty","","The type being bounded",26,N],[12,"colon_token","","",26,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,N],[3,"TraitBound","","A trait used as a bound on a type parameter.",N,N],[12,"modifier","","",27,N],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,N],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,N],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",N,N],[12,"attrs","","",28,N],[12,"ident","","",28,N],[12,"colon_token","","",28,N],[12,"bounds","","",28,N],[12,"eq_token","","",28,N],[12,"default","","",28,N],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",N,N],[12,"where_token","","",29,N],[12,"predicates","","",29,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",N,N],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",N,N],[12,"span","","",30,N],[3,"Lifetime","","A Rust lifetime: `'a`.",N,N],[12,"span","","",31,N],[3,"LitBool","","A boolean literal: `true` or `false`.",N,N],[12,"value","","",32,N],[12,"span","","",32,N],[3,"LitByte","","A byte literal: `b'f'`.",N,N],[12,"span","","",33,N],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",N,N],[12,"span","","",34,N],[3,"LitChar","","A character literal: `'a'`.",N,N],[12,"span","","",35,N],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",N,N],[12,"span","","",36,N],[3,"LitInt","","An integer literal: `1` or `1u16`.",N,N],[12,"span","","",37,N],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",N,N],[12,"span","","",38,N],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",N,N],[12,"token","","",39,N],[12,"span","","",39,N],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",N,N],[12,"path","","",40,N],[12,"bang_token","","",40,N],[12,"delimiter","","",40,N],[12,"tts","","",40,N],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",N,N],[12,"enum_token","","",41,N],[12,"brace_token","","",41,N],[12,"variants","","",41,N],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",N,N],[12,"struct_token","","",42,N],[12,"fields","","",42,N],[12,"semi_token","","",42,N],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",N,N],[12,"union_token","","",43,N],[12,"fields","","",43,N],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",N,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",44,N],[12,"vis","","Visibility of the struct or enum.",44,N],[12,"ident","","Name of the struct or enum.",44,N],[12,"generics","","Generics required to complete the definition.",44,N],[12,"data","","Data within the struct or enum.",44,N],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",N,N],[12,"extern_token","","",45,N],[12,"name","","",45,N],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",N,N],[12,"name","","",46,N],[12,"ty","","",46,N],[3,"TypeArray","","A fixed size array type: `[T; n]`.",N,N],[12,"bracket_token","","",47,N],[12,"elem","","",47,N],[12,"semi_token","","",47,N],[12,"len","","",47,N],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",N,N],[12,"unsafety","","",48,N],[12,"abi","","",48,N],[12,"fn_token","","",48,N],[12,"lifetimes","","",48,N],[12,"paren_token","","",48,N],[12,"inputs","","",48,N],[12,"variadic","","",48,N],[12,"output","","",48,N],[3,"TypeGroup","","A type contained within invisible delimiters.",N,N],[12,"group_token","","",49,N],[12,"elem","","",49,N],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",N,N],[12,"impl_token","","",50,N],[12,"bounds","","",50,N],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",N,N],[12,"underscore_token","","",51,N],[3,"TypeMacro","","A macro in the type position.",N,N],[12,"mac","","",52,N],[3,"TypeNever","","The never type: `!`.",N,N],[12,"bang_token","","",53,N],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",N,N],[12,"paren_token","","",54,N],[12,"elem","","",54,N],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",N,N],[12,"qself","","",55,N],[12,"path","","",55,N],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",N,N],[12,"star_token","","",56,N],[12,"const_token","","",56,N],[12,"mutability","","",56,N],[12,"elem","","",56,N],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",N,N],[12,"and_token","","",57,N],[12,"lifetime","","",57,N],[12,"mutability","","",57,N],[12,"elem","","",57,N],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",N,N],[12,"bracket_token","","",58,N],[12,"elem","","",58,N],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",N,N],[12,"dyn_token","","",59,N],[12,"bounds","","",59,N],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",N,N],[12,"paren_token","","",60,N],[12,"elems","","",60,N],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",N,N],[12,"tts","","",61,N],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",N,N],[12,"colon2_token","","",62,N],[12,"lt_token","","",62,N],[12,"args","","",62,N],[12,"gt_token","","",62,N],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",N,N],[12,"ident","","",63,N],[12,"eq_token","","",63,N],[12,"ty","","",63,N],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",N,N],[12,"paren_token","","",64,N],[12,"inputs","","`(A, B)`",64,N],[12,"output","","`C`",64,N],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",N,N],[12,"leading_colon","","",65,N],[12,"segments","","",65,N],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",N,N],[12,"ident","","",66,N],[12,"arguments","","",66,N],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",N,N],[12,"lt_token","","",67,N],[12,"ty","","",67,N],[12,"position","","",67,N],[12,"as_token","","",67,N],[12,"gt_token","","",67,N],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",N,N],[12,"0","","",68,N],[12,"1","","",68,N],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",N,N],[13,"Outer","","",69,N],[13,"Inner","","",69,N],[4,"Meta","","Content of a compile-time structured attribute.",N,N],[13,"Word","","",70,N],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",70,N],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",70,N],[4,"NestedMeta","","Element of a compile-time attribute list.",N,N],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",71,N],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",71,N],[4,"Fields","","Data stored within an enum variant or struct.",N,N],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",72,N],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",72,N],[13,"Unit","","Unit struct or unit variant such as `None`.",72,N],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",N,N],[13,"Public","","A public visibility level: `pub`.",73,N],[13,"Crate","","A crate-level visibility: `pub(crate)`.",73,N],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",73,N],[13,"Inherited","","An inherited visibility, which usually means private.",73,N],[4,"Expr","","A Rust expression.",N,N],[13,"Box","","A box expression: `box f`.",74,N],[13,"InPlace","","A placement expression: `place <- value`.",74,N],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",74,N],[13,"Call","","A function call expression: `invoke(a, b)`.",74,N],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",74,N],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",74,N],[13,"Binary","","A binary operation: `a + b`, `a * b`.",74,N],[13,"Unary","","A unary operation: `!x`, `*x`.",74,N],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",74,N],[13,"Cast","","A cast expression: `foo as f64`.",74,N],[13,"Type","","A type ascription expression: `foo: f64`.",74,N],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",74,N],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",74,N],[13,"While","","A while loop: `while expr { ... }`.",74,N],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",74,N],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",74,N],[13,"Loop","","Conditionless loop: `loop { ... }`.",74,N],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",74,N],[13,"Closure","","A closure expression: `|a, b| a + b`.",74,N],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",74,N],[13,"Block","","A blocked scope: `{ ... }`.",74,N],[13,"Assign","","An assignment expression: `a = compute()`.",74,N],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",74,N],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",74,N],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",74,N],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",74,N],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",74,N],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",74,N],[13,"Break","","A `break`, with an optional label to break and an optional expression.",74,N],[13,"Continue","","A `continue`, with an optional label.",74,N],[13,"Return","","A `return`, with an optional value to be returned.",74,N],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",74,N],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",74,N],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",74,N],[13,"Paren","","A parenthesized expression: `(a + b)`.",74,N],[13,"Group","","An expression contained within invisible delimiters.",74,N],[13,"Try","","A try-expression: `expr?`.",74,N],[13,"Catch","","A catch expression: `do catch { ... }`.",74,N],[13,"Yield","","A yield expression: `yield expr`.",74,N],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",74,N],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",N,N],[13,"Named","","A named field like `self.x`.",75,N],[13,"Unnamed","","An unnamed field like `self.0`.",75,N],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",N,N],[13,"Type","","A generic type parameter: `T: Into<String>`.",76,N],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",76,N],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",76,N],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",N,N],[13,"None","","",77,N],[13,"Maybe","","",77,N],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",N,N],[13,"Trait","","",78,N],[13,"Lifetime","","",78,N],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",N,N],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",79,N],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",79,N],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",79,N],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",N,N],[13,"F32","","",80,N],[13,"F64","","",80,N],[13,"None","","",80,N],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",N,N],[13,"I8","","",81,N],[13,"I16","","",81,N],[13,"I32","","",81,N],[13,"I64","","",81,N],[13,"I128","","",81,N],[13,"Isize","","",81,N],[13,"U8","","",81,N],[13,"U16","","",81,N],[13,"U32","","",81,N],[13,"U64","","",81,N],[13,"U128","","",81,N],[13,"Usize","","",81,N],[13,"None","","",81,N],[4,"Lit","","A Rust literal such as a string or integer or boolean.",N,N],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",82,N],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",82,N],[13,"Byte","","A byte literal: `b'f'`.",82,N],[13,"Char","","A character literal: `'a'`.",82,N],[13,"Int","","An integer literal: `1` or `1u16`.",82,N],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",82,N],[13,"Bool","","A boolean literal: `true` or `false`.",82,N],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",82,N],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",N,N],[13,"Cooked","","An ordinary string like `\"data\"`.",83,N],[13,"Raw","","A raw string like `r##\"data\"##`.",83,N],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",N,N],[13,"Paren","","",84,N],[13,"Brace","","",84,N],[13,"Bracket","","",84,N],[4,"Data","","The storage of a struct, enum or union data structure.",N,N],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",85,N],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",85,N],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",85,N],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",N,N],[13,"Add","","The `+` operator (addition)",86,N],[13,"Sub","","The `-` operator (subtraction)",86,N],[13,"Mul","","The `*` operator (multiplication)",86,N],[13,"Div","","The `/` operator (division)",86,N],[13,"Rem","","The `%` operator (modulus)",86,N],[13,"And","","The `&&` operator (logical and)",86,N],[13,"Or","","The `||` operator (logical or)",86,N],[13,"BitXor","","The `^` operator (bitwise xor)",86,N],[13,"BitAnd","","The `&` operator (bitwise and)",86,N],[13,"BitOr","","The `|` operator (bitwise or)",86,N],[13,"Shl","","The `<<` operator (shift left)",86,N],[13,"Shr","","The `>>` operator (shift right)",86,N],[13,"Eq","","The `==` operator (equality)",86,N],[13,"Lt","","The `<` operator (less than)",86,N],[13,"Le","","The `<=` operator (less than or equal to)",86,N],[13,"Ne","","The `!=` operator (not equal to)",86,N],[13,"Ge","","The `>=` operator (greater than or equal to)",86,N],[13,"Gt","","The `>` operator (greater than)",86,N],[13,"AddEq","","The `+=` operator",86,N],[13,"SubEq","","The `-=` operator",86,N],[13,"MulEq","","The `*=` operator",86,N],[13,"DivEq","","The `/=` operator",86,N],[13,"RemEq","","The `%=` operator",86,N],[13,"BitXorEq","","The `^=` operator",86,N],[13,"BitAndEq","","The `&=` operator",86,N],[13,"BitOrEq","","The `|=` operator",86,N],[13,"ShlEq","","The `<<=` operator",86,N],[13,"ShrEq","","The `>>=` operator",86,N],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",N,N],[13,"Deref","","The `*` operator for dereferencing",87,N],[13,"Not","","The `!` operator for logical inversion",87,N],[13,"Neg","","The `-` operator for negation",87,N],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",N,N],[13,"Named","","Argument given a name.",88,N],[13,"Wild","","Argument not given a name, matched with `_`.",88,N],[4,"ReturnType","","Return type of a function signature.",N,N],[13,"Default","","Return type is not specified.",89,N],[13,"Type","","A particular type is returned.",89,N],[4,"Type","","The possible types that a Rust value could have.",N,N],[13,"Slice","","A dynamically sized slice type: `[T]`.",90,N],[13,"Array","","A fixed size array type: `[T; n]`.",90,N],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",90,N],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",90,N],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",90,N],[13,"Never","","The never type: `!`.",90,N],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",90,N],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",90,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",90,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",90,N],[13,"Paren","","A parenthesized type equivalent to the inner type.",90,N],[13,"Group","","A type contained within invisible delimiters.",90,N],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",90,N],[13,"Macro","","A macro in the type position.",90,N],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",90,N],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",N,N],[13,"Lifetime","","A lifetime argument.",91,N],[13,"Type","","A type argument.",91,N],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",91,N],[13,"Const","","A const expression. Must be inside of a block.",91,N],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",N,N],[13,"None","","",92,N],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",92,N],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",92,N],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",N,[[["tokenstream"]],["result",["parseerror"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",N,[[["str"]],["result",["parseerror"]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",N,N],[3,"Add","syn::token","`+`",N,N],[12,"0","","",93,N],[3,"AddEq","","`+=`",N,N],[12,"0","","",94,N],[3,"And","","`&`",N,N],[12,"0","","",95,N],[3,"AndAnd","","`&&`",N,N],[12,"0","","",96,N],[3,"AndEq","","`&=`",N,N],[12,"0","","",97,N],[3,"At","","`@`",N,N],[12,"0","","",98,N],[3,"Bang","","`!`",N,N],[12,"0","","",99,N],[3,"Caret","","`^`",N,N],[12,"0","","",100,N],[3,"CaretEq","","`^=`",N,N],[12,"0","","",101,N],[3,"Colon","","`:`",N,N],[12,"0","","",102,N],[3,"Colon2","","`::`",N,N],[12,"0","","",103,N],[3,"Comma","","`,`",N,N],[12,"0","","",104,N],[3,"Div","","`/`",N,N],[12,"0","","",105,N],[3,"DivEq","","`/=`",N,N],[12,"0","","",106,N],[3,"Dot","","`.`",N,N],[12,"0","","",107,N],[3,"Dot2","","`..`",N,N],[12,"0","","",108,N],[3,"Dot3","","`...`",N,N],[12,"0","","",109,N],[3,"DotDotEq","","`..=`",N,N],[12,"0","","",110,N],[3,"Eq","","`=`",N,N],[12,"0","","",111,N],[3,"EqEq","","`==`",N,N],[12,"0","","",112,N],[3,"Ge","","`>=`",N,N],[12,"0","","",113,N],[3,"Gt","","`>`",N,N],[12,"0","","",114,N],[3,"Le","","`<=`",N,N],[12,"0","","",115,N],[3,"Lt","","`<`",N,N],[12,"0","","",116,N],[3,"MulEq","","`*=`",N,N],[12,"0","","",117,N],[3,"Ne","","`!=`",N,N],[12,"0","","",118,N],[3,"Or","","`|`",N,N],[12,"0","","",119,N],[3,"OrEq","","`|=`",N,N],[12,"0","","",120,N],[3,"OrOr","","`||`",N,N],[12,"0","","",121,N],[3,"Pound","","`#`",N,N],[12,"0","","",122,N],[3,"Question","","`?`",N,N],[12,"0","","",123,N],[3,"RArrow","","`->`",N,N],[12,"0","","",124,N],[3,"LArrow","","`<-`",N,N],[12,"0","","",125,N],[3,"Rem","","`%`",N,N],[12,"0","","",126,N],[3,"RemEq","","`%=`",N,N],[12,"0","","",127,N],[3,"Rocket","","`=>`",N,N],[12,"0","","",128,N],[3,"Semi","","`;`",N,N],[12,"0","","",129,N],[3,"Shl","","`<<`",N,N],[12,"0","","",130,N],[3,"ShlEq","","`<<=`",N,N],[12,"0","","",131,N],[3,"Shr","","`>>`",N,N],[12,"0","","",132,N],[3,"ShrEq","","`>>=`",N,N],[12,"0","","",133,N],[3,"Star","","`*`",N,N],[12,"0","","",134,N],[3,"Sub","","`-`",N,N],[12,"0","","",135,N],[3,"SubEq","","`-=`",N,N],[12,"0","","",136,N],[3,"Underscore","","`_`",N,N],[12,"0","","",137,N],[3,"Brace","","`{...}`",N,N],[12,"0","","",138,N],[3,"Bracket","","`[...]`",N,N],[12,"0","","",139,N],[3,"Paren","","`(...)`",N,N],[12,"0","","",140,N],[3,"Group","","None-delimited group",N,N],[12,"0","","",141,N],[3,"As","","`as`",N,N],[12,"0","","",142,N],[3,"Auto","","`auto`",N,N],[12,"0","","",143,N],[3,"Box","","`box`",N,N],[12,"0","","",144,N],[3,"Break","","`break`",N,N],[12,"0","","",145,N],[3,"CapSelf","","`Self`",N,N],[12,"0","","",146,N],[3,"Catch","","`catch`",N,N],[12,"0","","",147,N],[3,"Const","","`const`",N,N],[12,"0","","",148,N],[3,"Continue","","`continue`",N,N],[12,"0","","",149,N],[3,"Crate","","`crate`",N,N],[12,"0","","",150,N],[3,"Default","","`default`",N,N],[12,"0","","",151,N],[3,"Do","","`do`",N,N],[12,"0","","",152,N],[3,"Dyn","","`dyn`",N,N],[12,"0","","",153,N],[3,"Else","","`else`",N,N],[12,"0","","",154,N],[3,"Enum","","`enum`",N,N],[12,"0","","",155,N],[3,"Extern","","`extern`",N,N],[12,"0","","",156,N],[3,"Fn","","`fn`",N,N],[12,"0","","",157,N],[3,"For","","`for`",N,N],[12,"0","","",158,N],[3,"If","","`if`",N,N],[12,"0","","",159,N],[3,"Impl","","`impl`",N,N],[12,"0","","",160,N],[3,"In","","`in`",N,N],[12,"0","","",161,N],[3,"Let","","`let`",N,N],[12,"0","","",162,N],[3,"Loop","","`loop`",N,N],[12,"0","","",163,N],[3,"Macro","","`macro`",N,N],[12,"0","","",164,N],[3,"Match","","`match`",N,N],[12,"0","","",165,N],[3,"Mod","","`mod`",N,N],[12,"0","","",166,N],[3,"Move","","`move`",N,N],[12,"0","","",167,N],[3,"Mut","","`mut`",N,N],[12,"0","","",168,N],[3,"Pub","","`pub`",N,N],[12,"0","","",169,N],[3,"Ref","","`ref`",N,N],[12,"0","","",170,N],[3,"Return","","`return`",N,N],[12,"0","","",171,N],[3,"Self_","","`self`",N,N],[12,"0","","",172,N],[3,"Static","","`static`",N,N],[12,"0","","",173,N],[3,"Struct","","`struct`",N,N],[12,"0","","",174,N],[3,"Super","","`super`",N,N],[12,"0","","",175,N],[3,"Trait","","`trait`",N,N],[12,"0","","",176,N],[3,"Type","","`type`",N,N],[12,"0","","",177,N],[3,"Union","","`union`",N,N],[12,"0","","",178,N],[3,"Unsafe","","`unsafe`",N,N],[12,"0","","",179,N],[3,"Use","","`use`",N,N],[12,"0","","",180,N],[3,"Where","","`where`",N,N],[12,"0","","",181,N],[3,"While","","`while`",N,N],[12,"0","","",182,N],[3,"Yield","","`yield`",N,N],[12,"0","","",183,N],[11,"new","","",93,[[["span"]],["self"]]],[11,"new","","",94,[[["span"]],["self"]]],[11,"new","","",95,[[["span"]],["self"]]],[11,"new","","",96,[[["span"]],["self"]]],[11,"new","","",97,[[["span"]],["self"]]],[11,"new","","",98,[[["span"]],["self"]]],[11,"new","","",99,[[["span"]],["self"]]],[11,"new","","",100,[[["span"]],["self"]]],[11,"new","","",101,[[["span"]],["self"]]],[11,"new","","",102,[[["span"]],["self"]]],[11,"new","","",103,[[["span"]],["self"]]],[11,"new","","",104,[[["span"]],["self"]]],[11,"new","","",105,[[["span"]],["self"]]],[11,"new","","",106,[[["span"]],["self"]]],[11,"new","","",107,[[["span"]],["self"]]],[11,"new","","",108,[[["span"]],["self"]]],[11,"new","","",109,[[["span"]],["self"]]],[11,"new","","",110,[[["span"]],["self"]]],[11,"new","","",111,[[["span"]],["self"]]],[11,"new","","",112,[[["span"]],["self"]]],[11,"new","","",113,[[["span"]],["self"]]],[11,"new","","",114,[[["span"]],["self"]]],[11,"new","","",115,[[["span"]],["self"]]],[11,"new","","",116,[[["span"]],["self"]]],[11,"new","","",117,[[["span"]],["self"]]],[11,"new","","",118,[[["span"]],["self"]]],[11,"new","","",119,[[["span"]],["self"]]],[11,"new","","",120,[[["span"]],["self"]]],[11,"new","","",121,[[["span"]],["self"]]],[11,"new","","",122,[[["span"]],["self"]]],[11,"new","","",123,[[["span"]],["self"]]],[11,"new","","",124,[[["span"]],["self"]]],[11,"new","","",125,[[["span"]],["self"]]],[11,"new","","",126,[[["span"]],["self"]]],[11,"new","","",127,[[["span"]],["self"]]],[11,"new","","",128,[[["span"]],["self"]]],[11,"new","","",129,[[["span"]],["self"]]],[11,"new","","",130,[[["span"]],["self"]]],[11,"new","","",131,[[["span"]],["self"]]],[11,"new","","",132,[[["span"]],["self"]]],[11,"new","","",133,[[["span"]],["self"]]],[11,"new","","",134,[[["span"]],["self"]]],[11,"new","","",135,[[["span"]],["self"]]],[11,"new","","",136,[[["span"]],["self"]]],[11,"new","","",137,[[["span"]],["self"]]],[11,"surround","","",138,[[["self"],["tokens"],["f"]]]],[11,"parse","","",138,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",139,[[["self"],["tokens"],["f"]]]],[11,"parse","","",139,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",140,[[["self"],["tokens"],["f"]]]],[11,"parse","","",140,[[["cursor"],["f"]],["presult"]]],[11,"surround","","",141,[[["self"],["tokens"],["f"]]]],[11,"parse","","",141,[[["cursor"],["f"]],["presult"]]],[11,"parse_inner","syn","",0,[[["cursor"]],["presult"]]],[11,"parse_outer","","",0,[[["cursor"]],["presult"]]],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,[[["self"]],["option",["meta"]]]],[11,"name","","Returns the identifier that begins this structured meta item.",70,[[["self"]],["ident"]]],[11,"parse_named","","",3,[[["cursor"]],["presult"]]],[11,"parse_unnamed","","",3,[[["cursor"]],["presult"]]],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",72,[[["self"]],["iter",["field","comma"]]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,[[["self"]],["constparamsmut"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",184,[[["self"]],["turbofish"]]],[11,"new","","",23,[[["lifetime"]],["self"]]],[11,"new","","Creates an ident with the given string representation.",30,[[["str"],["span"]],["self"]]],[11,"new","","",31,[[["term"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",82,[[["literal"],["span"]],["self"]]],[11,"new","","",38,[[["str"],["span"]],["self"]]],[11,"value","","",38,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string literal.",38,[[["self"]],["result",["parseerror"]]]],[11,"new","","",34,N],[11,"value","","",34,[[["self"]],["vec",["u8"]]]],[11,"new","","",33,[[["u8"],["span"]],["self"]]],[11,"value","","",33,[[["self"]],["u8"]]],[11,"new","","",35,[[["char"],["span"]],["self"]]],[11,"value","","",35,[[["self"]],["char"]]],[11,"new","","",37,[[["u64"],["intsuffix"],["span"]],["self"]]],[11,"value","","",37,[[["self"]],["u64"]]],[11,"suffix","","",37,[[["self"]],["intsuffix"]]],[11,"new","","",36,[[["f64"],["floatsuffix"],["span"]],["self"]]],[11,"value","","",36,[[["self"]],["f64"]]],[11,"suffix","","",36,[[["self"]],["floatsuffix"]]],[11,"parse_binop","","",86,[[["cursor"]],["presult"]]],[11,"without_plus","","",90,[[["cursor"]],["presult"]]],[11,"without_plus","","",59,[[["cursor"]],["presult"]]],[11,"parse_mod_style","","",65,[[["cursor"]],["presult"]]],[11,"global","","",65,[[["self"]],["bool"]]],[11,"is_empty","","",92,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",N,N],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",N,N],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",N,N],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",185,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",185,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",185,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",186,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",186,[[["self"]],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",186,[[["self"],["delimiter"]],["option"]]],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",186,[[["self"]],["option"]]],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",186,[[["self"]],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",186,[[["self"]],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",186,[[["self"]],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",186,[[["self"]],["option"]]],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",186,[[["self"]],["span"]]],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",N,N],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",N,N],[6,"PResult","","The result of a `Synom` parser.",N,N],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",N,N],[10,"parse","","",187,[[["cursor"]],["presult"]]],[11,"description","","A short name of the type being parsed.",187,[[],["option",["str"]]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",N,N],[16,"Output","","",188,N],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",188,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",188,[[["self"],["tokenstream"]],["result",["parseerror"]]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",188,[[["self"],["str"]],["result",["parseerror"]]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",N,N],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",N,N],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",N,N],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",N,N],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",N,N],[3,"IntoIter","","An iterator over owned values of type `T`.",N,N],[3,"Iter","","An iterator over borrowed values of type `&T`.",N,N],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",N,N],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",N,N],[13,"Punctuated","","",189,N],[13,"End","","",189,N],[11,"new","","Creates an empty punctuated sequence.",190,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",190,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",190,[[["self"]],["usize"]]],[11,"first","","Borrows the first punctuated pair in this sequence.",190,[[["self"]],["option",["pair"]]]],[11,"last","","Borrows the last punctuated pair in this sequence.",190,[[["self"]],["option",["pair"]]]],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",190,[[["self"]],["option",["pair"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",190,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",190,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",190,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",190,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",190,[[["self"]],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",190,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",190,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",190,[[["self"]],["option",["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",190,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",190,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",190,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",190,[[["self"],["usize"],["t"]]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",189,[[["self"]],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",189,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",189,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",189,[[["self"]],["option"]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",189,[[["t"],["option"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",189,N],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",190,[[["cursor"]],["presult"]]],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",190,[[["cursor"]],["presult"]]],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",190,[[["cursor"]],["presult"]]],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",190,[[["cursor"]],["presult"]]],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",190,N],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",190,N],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",190,N],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",190,N],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",N,N],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",191,[[["self"]],["span"]]],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",N,N],[14,"call","","Invoke the given parser function with zero or more arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",N,N],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",N,N],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything.",N,N],[14,"reject","","Unconditionally fail to parse anything.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",N,N],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"syn","","Parse any type that implements the `Synom` trait.",N,N],[14,"parens","","Parse inside of `(` `)` parentheses.",N,N],[14,"brackets","","Parse inside of `[` `]` square brackets.",N,N],[14,"braces","","Parse inside of `{` `}` curly braces.",N,N],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",N,N],[14,"punct","","Parse a single Rust punctuation token.",N,N],[14,"keyword","","Parse a single Rust keyword token.",N,N],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",N,N],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"not_found","","",0,[[["str"],["str"]],["e"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"not_found","","",1,[[["str"],["str"]],["e"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"not_found","","",2,[[["str"],["str"]],["e"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"not_found","","",3,[[["str"],["str"]],["e"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"not_found","","",4,[[["str"],["str"]],["e"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"not_found","","",5,[[["str"],["str"]],["e"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"not_found","","",6,[[["str"],["str"]],["e"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"not_found","","",7,[[["str"],["str"]],["e"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"not_found","","",8,[[["str"],["str"]],["e"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"not_found","","",9,[[["str"],["str"]],["e"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[["self"]],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,N],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"get_type_id","","",192,[[["self"]],["typeid"]]],[11,"try_into","","",192,[[["self"]],["result"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"not_found","","",192,[[["str"],["str"]],["e"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[["self"]],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,N],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"get_type_id","","",193,[[["self"]],["typeid"]]],[11,"try_into","","",193,[[["self"]],["result"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"not_found","","",193,[[["str"],["str"]],["e"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[["self"]],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,N],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"get_type_id","","",194,[[["self"]],["typeid"]]],[11,"try_into","","",194,[[["self"]],["result"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"not_found","","",194,[[["str"],["str"]],["e"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[["self"]],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,N],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"get_type_id","","",195,[[["self"]],["typeid"]]],[11,"try_into","","",195,[[["self"]],["result"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"not_found","","",195,[[["str"],["str"]],["e"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"not_found","","",10,[[["str"],["str"]],["e"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[["self"]],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,N],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"get_type_id","","",196,[[["self"]],["typeid"]]],[11,"try_into","","",196,[[["self"]],["result"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"not_found","","",196,[[["str"],["str"]],["e"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[["self"]],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,N],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"get_type_id","","",197,[[["self"]],["typeid"]]],[11,"try_into","","",197,[[["self"]],["result"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"not_found","","",197,[[["str"],["str"]],["e"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[["self"]],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,N],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"get_type_id","","",198,[[["self"]],["typeid"]]],[11,"try_into","","",198,[[["self"]],["result"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"not_found","","",198,[[["str"],["str"]],["e"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"not_found","","",11,[[["str"],["str"]],["e"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"not_found","","",12,[[["str"],["str"]],["e"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[["self"]],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,N],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"get_type_id","","",199,[[["self"]],["typeid"]]],[11,"try_into","","",199,[[["self"]],["result"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"not_found","","",199,[[["str"],["str"]],["e"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[["self"]],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,N],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"get_type_id","","",200,[[["self"]],["typeid"]]],[11,"try_into","","",200,[[["self"]],["result"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"not_found","","",200,[[["str"],["str"]],["e"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[["self"]],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,N],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"get_type_id","","",201,[[["self"]],["typeid"]]],[11,"try_into","","",201,[[["self"]],["result"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"not_found","","",201,[[["str"],["str"]],["e"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[["self"]],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,N],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"get_type_id","","",202,[[["self"]],["typeid"]]],[11,"try_into","","",202,[[["self"]],["result"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"not_found","","",202,[[["str"],["str"]],["e"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[["self"]],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,N],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"get_type_id","","",203,[[["self"]],["typeid"]]],[11,"try_into","","",203,[[["self"]],["result"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"not_found","","",203,[[["str"],["str"]],["e"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[["self"]],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,N],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"get_type_id","","",204,[[["self"]],["typeid"]]],[11,"try_into","","",204,[[["self"]],["result"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"not_found","","",204,[[["str"],["str"]],["e"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[["self"]],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,N],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"get_type_id","","",205,[[["self"]],["typeid"]]],[11,"try_into","","",205,[[["self"]],["result"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"not_found","","",205,[[["str"],["str"]],["e"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[["self"]],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,N],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"get_type_id","","",206,[[["self"]],["typeid"]]],[11,"try_into","","",206,[[["self"]],["result"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"not_found","","",206,[[["str"],["str"]],["e"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[["self"]],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,N],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"get_type_id","","",207,[[["self"]],["typeid"]]],[11,"try_into","","",207,[[["self"]],["result"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"not_found","","",207,[[["str"],["str"]],["e"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"not_found","","",13,[[["str"],["str"]],["e"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"not_found","","",14,[[["str"],["str"]],["e"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[["self"]],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,N],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"get_type_id","","",208,[[["self"]],["typeid"]]],[11,"try_into","","",208,[[["self"]],["result"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"not_found","","",208,[[["str"],["str"]],["e"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[["self"]],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,N],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"get_type_id","","",209,[[["self"]],["typeid"]]],[11,"try_into","","",209,[[["self"]],["result"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"not_found","","",209,[[["str"],["str"]],["e"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[["self"]],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,N],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"get_type_id","","",210,[[["self"]],["typeid"]]],[11,"try_into","","",210,[[["self"]],["result"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"not_found","","",210,[[["str"],["str"]],["e"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[["self"]],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,N],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"get_type_id","","",211,[[["self"]],["typeid"]]],[11,"try_into","","",211,[[["self"]],["result"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"not_found","","",211,[[["str"],["str"]],["e"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"not_found","","",15,[[["str"],["str"]],["e"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"not_found","","",16,[[["str"],["str"]],["e"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[["self"]],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,N],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"get_type_id","","",212,[[["self"]],["typeid"]]],[11,"try_into","","",212,[[["self"]],["result"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"not_found","","",212,[[["str"],["str"]],["e"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[["self"]],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,N],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"get_type_id","","",213,[[["self"]],["typeid"]]],[11,"try_into","","",213,[[["self"]],["result"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"not_found","","",213,[[["str"],["str"]],["e"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[["self"]],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,N],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"get_type_id","","",214,[[["self"]],["typeid"]]],[11,"try_into","","",214,[[["self"]],["result"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"not_found","","",214,[[["str"],["str"]],["e"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[["self"]],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,N],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"get_type_id","","",215,[[["self"]],["typeid"]]],[11,"try_into","","",215,[[["self"]],["result"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"not_found","","",215,[[["str"],["str"]],["e"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[["self"]],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,N],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"get_type_id","","",216,[[["self"]],["typeid"]]],[11,"try_into","","",216,[[["self"]],["result"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"not_found","","",216,[[["str"],["str"]],["e"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[["self"]],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,N],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"get_type_id","","",217,[[["self"]],["typeid"]]],[11,"try_into","","",217,[[["self"]],["result"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"not_found","","",217,[[["str"],["str"]],["e"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[["self"]],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,N],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"get_type_id","","",218,[[["self"]],["typeid"]]],[11,"try_into","","",218,[[["self"]],["result"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"not_found","","",218,[[["str"],["str"]],["e"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"not_found","","",17,[[["str"],["str"]],["e"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[["self"]],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,N],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"get_type_id","","",219,[[["self"]],["typeid"]]],[11,"try_into","","",219,[[["self"]],["result"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"not_found","","",219,[[["str"],["str"]],["e"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"not_found","","",18,[[["str"],["str"]],["e"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[["self"]],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,N],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"get_type_id","","",220,[[["self"]],["typeid"]]],[11,"try_into","","",220,[[["self"]],["result"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"not_found","","",220,[[["str"],["str"]],["e"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[["self"]],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,N],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"get_type_id","","",221,[[["self"]],["typeid"]]],[11,"try_into","","",221,[[["self"]],["result"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"not_found","","",221,[[["str"],["str"]],["e"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[["self"]],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,N],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"get_type_id","","",222,[[["self"]],["typeid"]]],[11,"try_into","","",222,[[["self"]],["result"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"not_found","","",222,[[["str"],["str"]],["e"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"not_found","","",19,[[["str"],["str"]],["e"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"not_found","","",20,[[["str"],["str"]],["e"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"not_found","","",21,[[["str"],["str"]],["e"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"not_found","","",22,[[["str"],["str"]],["e"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"not_found","","",23,[[["str"],["str"]],["e"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"not_found","","",24,[[["str"],["str"]],["e"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"not_found","","",25,[[["str"],["str"]],["e"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"not_found","","",26,[[["str"],["str"]],["e"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"not_found","","",27,[[["str"],["str"]],["e"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"not_found","","",28,[[["str"],["str"]],["e"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"not_found","","",29,[[["str"],["str"]],["e"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[["self"]],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,N],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"get_type_id","","",223,[[["self"]],["typeid"]]],[11,"try_into","","",223,[[["self"]],["result"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"not_found","","",223,[[["str"],["str"]],["e"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into","","",224,[[["self"]],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,N],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"get_type_id","","",224,[[["self"]],["typeid"]]],[11,"try_into","","",224,[[["self"]],["result"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"not_found","","",224,[[["str"],["str"]],["e"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[["self"]],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,N],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"get_type_id","","",184,[[["self"]],["typeid"]]],[11,"try_into","","",184,[[["self"]],["result"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"not_found","","",184,[[["str"],["str"]],["e"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"not_found","","",30,[[["str"],["str"]],["e"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"not_found","","",31,[[["str"],["str"]],["e"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"not_found","","",32,[[["str"],["str"]],["e"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"not_found","","",33,[[["str"],["str"]],["e"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"not_found","","",34,[[["str"],["str"]],["e"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"not_found","","",35,[[["str"],["str"]],["e"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"not_found","","",36,[[["str"],["str"]],["e"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"not_found","","",37,[[["str"],["str"]],["e"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"not_found","","",38,[[["str"],["str"]],["e"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"not_found","","",39,[[["str"],["str"]],["e"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"not_found","","",40,[[["str"],["str"]],["e"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"not_found","","",41,[[["str"],["str"]],["e"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"not_found","","",42,[[["str"],["str"]],["e"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"not_found","","",43,[[["str"],["str"]],["e"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"not_found","","",44,[[["str"],["str"]],["e"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"not_found","","",45,[[["str"],["str"]],["e"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"not_found","","",46,[[["str"],["str"]],["e"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"not_found","","",47,[[["str"],["str"]],["e"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"not_found","","",48,[[["str"],["str"]],["e"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"not_found","","",49,[[["str"],["str"]],["e"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"not_found","","",50,[[["str"],["str"]],["e"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"not_found","","",51,[[["str"],["str"]],["e"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"not_found","","",52,[[["str"],["str"]],["e"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"not_found","","",53,[[["str"],["str"]],["e"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"not_found","","",54,[[["str"],["str"]],["e"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"not_found","","",55,[[["str"],["str"]],["e"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"not_found","","",56,[[["str"],["str"]],["e"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"not_found","","",57,[[["str"],["str"]],["e"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"not_found","","",58,[[["str"],["str"]],["e"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"not_found","","",59,[[["str"],["str"]],["e"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"not_found","","",60,[[["str"],["str"]],["e"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"not_found","","",61,[[["str"],["str"]],["e"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"not_found","","",62,[[["str"],["str"]],["e"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"not_found","","",63,[[["str"],["str"]],["e"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"not_found","","",64,[[["str"],["str"]],["e"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,N],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"not_found","","",65,[[["str"],["str"]],["e"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"not_found","","",66,[[["str"],["str"]],["e"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"not_found","","",67,[[["str"],["str"]],["e"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"not_found","","",68,[[["str"],["str"]],["e"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,N],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"not_found","","",69,[[["str"],["str"]],["e"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,N],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"not_found","","",70,[[["str"],["str"]],["e"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,N],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"not_found","","",71,[[["str"],["str"]],["e"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"not_found","","",72,[[["str"],["str"]],["e"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"not_found","","",73,[[["str"],["str"]],["e"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"not_found","","",74,[[["str"],["str"]],["e"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"not_found","","",75,[[["str"],["str"]],["e"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"not_found","","",76,[[["str"],["str"]],["e"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"not_found","","",77,[[["str"],["str"]],["e"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"not_found","","",78,[[["str"],["str"]],["e"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"not_found","","",79,[[["str"],["str"]],["e"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"not_found","","",80,[[["str"],["str"]],["e"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,N],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"not_found","","",81,[[["str"],["str"]],["e"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,N],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"not_found","","",82,[[["str"],["str"]],["e"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"not_found","","",83,[[["str"],["str"]],["e"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"not_found","","",84,[[["str"],["str"]],["e"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,N],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"not_found","","",85,[[["str"],["str"]],["e"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,N],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"not_found","","",86,[[["str"],["str"]],["e"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"not_found","","",87,[[["str"],["str"]],["e"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"not_found","","",88,[[["str"],["str"]],["e"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"not_found","","",89,[[["str"],["str"]],["e"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"not_found","","",90,[[["str"],["str"]],["e"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"not_found","","",91,[[["str"],["str"]],["e"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"not_found","","",92,[[["str"],["str"]],["e"]]],[11,"span","syn::token","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"not_found","","",93,[[["str"],["str"]],["e"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"not_found","","",94,[[["str"],["str"]],["e"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"not_found","","",95,[[["str"],["str"]],["e"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"not_found","","",96,[[["str"],["str"]],["e"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"not_found","","",97,[[["str"],["str"]],["e"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"not_found","","",98,[[["str"],["str"]],["e"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"not_found","","",99,[[["str"],["str"]],["e"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"not_found","","",100,[[["str"],["str"]],["e"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"not_found","","",101,[[["str"],["str"]],["e"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"not_found","","",102,[[["str"],["str"]],["e"]]],[11,"span","","",103,[[["self"]],["span"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"not_found","","",103,[[["str"],["str"]],["e"]]],[11,"span","","",104,[[["self"]],["span"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"not_found","","",104,[[["str"],["str"]],["e"]]],[11,"span","","",105,[[["self"]],["span"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"not_found","","",105,[[["str"],["str"]],["e"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"not_found","","",106,[[["str"],["str"]],["e"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"not_found","","",107,[[["str"],["str"]],["e"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"not_found","","",108,[[["str"],["str"]],["e"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"not_found","","",109,[[["str"],["str"]],["e"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"not_found","","",110,[[["str"],["str"]],["e"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"not_found","","",111,[[["str"],["str"]],["e"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"not_found","","",112,[[["str"],["str"]],["e"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"not_found","","",113,[[["str"],["str"]],["e"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"not_found","","",114,[[["str"],["str"]],["e"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"not_found","","",115,[[["str"],["str"]],["e"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"not_found","","",116,[[["str"],["str"]],["e"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"not_found","","",117,[[["str"],["str"]],["e"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"not_found","","",118,[[["str"],["str"]],["e"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"not_found","","",119,[[["str"],["str"]],["e"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"not_found","","",120,[[["str"],["str"]],["e"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"not_found","","",121,[[["str"],["str"]],["e"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"not_found","","",122,[[["str"],["str"]],["e"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"not_found","","",123,[[["str"],["str"]],["e"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"not_found","","",124,[[["str"],["str"]],["e"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"not_found","","",125,[[["str"],["str"]],["e"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,N],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"not_found","","",126,[[["str"],["str"]],["e"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,N],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"not_found","","",127,[[["str"],["str"]],["e"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"not_found","","",128,[[["str"],["str"]],["e"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,N],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"not_found","","",129,[[["str"],["str"]],["e"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"not_found","","",130,[[["str"],["str"]],["e"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"not_found","","",131,[[["str"],["str"]],["e"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"not_found","","",132,[[["str"],["str"]],["e"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,N],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"not_found","","",133,[[["str"],["str"]],["e"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"not_found","","",134,[[["str"],["str"]],["e"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,N],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"not_found","","",135,[[["str"],["str"]],["e"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,N],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"not_found","","",136,[[["str"],["str"]],["e"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,N],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"not_found","","",137,[[["str"],["str"]],["e"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,N],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"not_found","","",138,[[["str"],["str"]],["e"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,N],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"not_found","","",139,[[["str"],["str"]],["e"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"not_found","","",140,[[["str"],["str"]],["e"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,N],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"not_found","","",141,[[["str"],["str"]],["e"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"not_found","","",142,[[["str"],["str"]],["e"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"not_found","","",143,[[["str"],["str"]],["e"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"not_found","","",144,[[["str"],["str"]],["e"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"not_found","","",145,[[["str"],["str"]],["e"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,N],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"not_found","","",146,[[["str"],["str"]],["e"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[["self"]],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,N],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"get_type_id","","",147,[[["self"]],["typeid"]]],[11,"try_into","","",147,[[["self"]],["result"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"not_found","","",147,[[["str"],["str"]],["e"]]],[11,"span","","",148,[[["self"]],["span"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[["self"]],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,N],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"get_type_id","","",148,[[["self"]],["typeid"]]],[11,"try_into","","",148,[[["self"]],["result"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"not_found","","",148,[[["str"],["str"]],["e"]]],[11,"span","","",149,[[["self"]],["span"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[["self"]],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,N],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"get_type_id","","",149,[[["self"]],["typeid"]]],[11,"try_into","","",149,[[["self"]],["result"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"not_found","","",149,[[["str"],["str"]],["e"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[["self"]],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,N],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"get_type_id","","",150,[[["self"]],["typeid"]]],[11,"try_into","","",150,[[["self"]],["result"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"not_found","","",150,[[["str"],["str"]],["e"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[["self"]],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,N],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"get_type_id","","",151,[[["self"]],["typeid"]]],[11,"try_into","","",151,[[["self"]],["result"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"not_found","","",151,[[["str"],["str"]],["e"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[["self"]],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,N],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"get_type_id","","",152,[[["self"]],["typeid"]]],[11,"try_into","","",152,[[["self"]],["result"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"not_found","","",152,[[["str"],["str"]],["e"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[["self"]],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,N],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"get_type_id","","",153,[[["self"]],["typeid"]]],[11,"try_into","","",153,[[["self"]],["result"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"not_found","","",153,[[["str"],["str"]],["e"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[["self"]],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,N],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"get_type_id","","",154,[[["self"]],["typeid"]]],[11,"try_into","","",154,[[["self"]],["result"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"not_found","","",154,[[["str"],["str"]],["e"]]],[11,"span","","",155,[[["self"]],["span"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[["self"]],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,N],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"get_type_id","","",155,[[["self"]],["typeid"]]],[11,"try_into","","",155,[[["self"]],["result"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"not_found","","",155,[[["str"],["str"]],["e"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[["self"]],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,N],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"get_type_id","","",156,[[["self"]],["typeid"]]],[11,"try_into","","",156,[[["self"]],["result"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"not_found","","",156,[[["str"],["str"]],["e"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[["self"]],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,N],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"get_type_id","","",157,[[["self"]],["typeid"]]],[11,"try_into","","",157,[[["self"]],["result"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"not_found","","",157,[[["str"],["str"]],["e"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[["self"]],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,N],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"get_type_id","","",158,[[["self"]],["typeid"]]],[11,"try_into","","",158,[[["self"]],["result"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"not_found","","",158,[[["str"],["str"]],["e"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[["self"]],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,N],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"get_type_id","","",159,[[["self"]],["typeid"]]],[11,"try_into","","",159,[[["self"]],["result"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"not_found","","",159,[[["str"],["str"]],["e"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[["self"]],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,N],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"get_type_id","","",160,[[["self"]],["typeid"]]],[11,"try_into","","",160,[[["self"]],["result"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"not_found","","",160,[[["str"],["str"]],["e"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[["self"]],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,N],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"get_type_id","","",161,[[["self"]],["typeid"]]],[11,"try_into","","",161,[[["self"]],["result"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"not_found","","",161,[[["str"],["str"]],["e"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[["self"]],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,N],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"get_type_id","","",162,[[["self"]],["typeid"]]],[11,"try_into","","",162,[[["self"]],["result"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"not_found","","",162,[[["str"],["str"]],["e"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[["self"]],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,N],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"get_type_id","","",163,[[["self"]],["typeid"]]],[11,"try_into","","",163,[[["self"]],["result"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"not_found","","",163,[[["str"],["str"]],["e"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[["self"]],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,N],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"get_type_id","","",164,[[["self"]],["typeid"]]],[11,"try_into","","",164,[[["self"]],["result"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"not_found","","",164,[[["str"],["str"]],["e"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[["self"]],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,N],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"get_type_id","","",165,[[["self"]],["typeid"]]],[11,"try_into","","",165,[[["self"]],["result"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"not_found","","",165,[[["str"],["str"]],["e"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[["self"]],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,N],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"get_type_id","","",166,[[["self"]],["typeid"]]],[11,"try_into","","",166,[[["self"]],["result"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"not_found","","",166,[[["str"],["str"]],["e"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[["self"]],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,N],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"get_type_id","","",167,[[["self"]],["typeid"]]],[11,"try_into","","",167,[[["self"]],["result"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"not_found","","",167,[[["str"],["str"]],["e"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[["self"]],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,N],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"get_type_id","","",168,[[["self"]],["typeid"]]],[11,"try_into","","",168,[[["self"]],["result"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"not_found","","",168,[[["str"],["str"]],["e"]]],[11,"span","","",169,[[["self"]],["span"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[["self"]],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,N],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"get_type_id","","",169,[[["self"]],["typeid"]]],[11,"try_into","","",169,[[["self"]],["result"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"not_found","","",169,[[["str"],["str"]],["e"]]],[11,"span","","",170,[[["self"]],["span"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[["self"]],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,N],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"get_type_id","","",170,[[["self"]],["typeid"]]],[11,"try_into","","",170,[[["self"]],["result"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"not_found","","",170,[[["str"],["str"]],["e"]]],[11,"span","","",171,[[["self"]],["span"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[["self"]],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,N],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"get_type_id","","",171,[[["self"]],["typeid"]]],[11,"try_into","","",171,[[["self"]],["result"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"not_found","","",171,[[["str"],["str"]],["e"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[["self"]],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,N],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"get_type_id","","",172,[[["self"]],["typeid"]]],[11,"try_into","","",172,[[["self"]],["result"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"not_found","","",172,[[["str"],["str"]],["e"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[["self"]],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,N],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"get_type_id","","",173,[[["self"]],["typeid"]]],[11,"try_into","","",173,[[["self"]],["result"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"not_found","","",173,[[["str"],["str"]],["e"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[["self"]],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,N],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"get_type_id","","",174,[[["self"]],["typeid"]]],[11,"try_into","","",174,[[["self"]],["result"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"not_found","","",174,[[["str"],["str"]],["e"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[["self"]],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,N],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"get_type_id","","",175,[[["self"]],["typeid"]]],[11,"try_into","","",175,[[["self"]],["result"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"not_found","","",175,[[["str"],["str"]],["e"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[["self"]],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,N],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"get_type_id","","",176,[[["self"]],["typeid"]]],[11,"try_into","","",176,[[["self"]],["result"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"not_found","","",176,[[["str"],["str"]],["e"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[["self"]],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,N],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"get_type_id","","",177,[[["self"]],["typeid"]]],[11,"try_into","","",177,[[["self"]],["result"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"not_found","","",177,[[["str"],["str"]],["e"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[["self"]],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,N],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"get_type_id","","",178,[[["self"]],["typeid"]]],[11,"try_into","","",178,[[["self"]],["result"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"not_found","","",178,[[["str"],["str"]],["e"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[["self"]],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,N],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"get_type_id","","",179,[[["self"]],["typeid"]]],[11,"try_into","","",179,[[["self"]],["result"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"not_found","","",179,[[["str"],["str"]],["e"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[["self"]],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,N],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"get_type_id","","",180,[[["self"]],["typeid"]]],[11,"try_into","","",180,[[["self"]],["result"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"not_found","","",180,[[["str"],["str"]],["e"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[["self"]],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,N],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"get_type_id","","",181,[[["self"]],["typeid"]]],[11,"try_into","","",181,[[["self"]],["result"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"not_found","","",181,[[["str"],["str"]],["e"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[["self"]],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,N],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"get_type_id","","",182,[[["self"]],["typeid"]]],[11,"try_into","","",182,[[["self"]],["result"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"not_found","","",182,[[["str"],["str"]],["e"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[["self"]],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,N],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"get_type_id","","",183,[[["self"]],["typeid"]]],[11,"try_into","","",183,[[["self"]],["result"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"not_found","","",183,[[["str"],["str"]],["e"]]],[11,"from","syn::buffer","",185,[[["t"]],["t"]]],[11,"into","","",185,[[["self"]],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"get_type_id","","",185,[[["self"]],["typeid"]]],[11,"try_into","","",185,[[["self"]],["result"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"not_found","","",185,[[["str"],["str"]],["e"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[["self"]],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,N],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"get_type_id","","",186,[[["self"]],["typeid"]]],[11,"try_into","","",186,[[["self"]],["result"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"not_found","","",186,[[["str"],["str"]],["e"]]],[11,"from","syn::synom","",225,[[["t"]],["t"]]],[11,"into","","",225,[[["self"]],["u"]]],[11,"to_string","","",225,[[["self"]],["string"]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"get_type_id","","",225,[[["self"]],["typeid"]]],[11,"try_into","","",225,[[["self"]],["result"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"not_found","","",225,[[["str"],["str"]],["e"]]],[11,"span","syn::punctuated","",190,[[["self"]],["span"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[["self"]],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,N],[11,"into_iter","","",190,[[["self"]],["i"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"get_type_id","","",190,[[["self"]],["typeid"]]],[11,"try_into","","",190,[[["self"]],["result"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"not_found","","",190,[[["str"],["str"]],["e"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[["self"]],["u"]]],[11,"into_iter","","",226,[[["self"]],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"get_type_id","","",226,[[["self"]],["typeid"]]],[11,"try_into","","",226,[[["self"]],["result"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"not_found","","",226,[[["str"],["str"]],["e"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[["self"]],["u"]]],[11,"into_iter","","",227,[[["self"]],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"get_type_id","","",227,[[["self"]],["typeid"]]],[11,"try_into","","",227,[[["self"]],["result"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"not_found","","",227,[[["str"],["str"]],["e"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[["self"]],["u"]]],[11,"into_iter","","",228,[[["self"]],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"get_type_id","","",228,[[["self"]],["typeid"]]],[11,"try_into","","",228,[[["self"]],["result"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"not_found","","",228,[[["str"],["str"]],["e"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into","","",229,[[["self"]],["u"]]],[11,"into_iter","","",229,[[["self"]],["i"]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"get_type_id","","",229,[[["self"]],["typeid"]]],[11,"try_into","","",229,[[["self"]],["result"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"not_found","","",229,[[["str"],["str"]],["e"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[["self"]],["u"]]],[11,"into_iter","","",230,[[["self"]],["i"]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"get_type_id","","",230,[[["self"]],["typeid"]]],[11,"try_into","","",230,[[["self"]],["result"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"not_found","","",230,[[["str"],["str"]],["e"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[["self"]],["u"]]],[11,"into_iter","","",231,[[["self"]],["i"]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"get_type_id","","",231,[[["self"]],["typeid"]]],[11,"try_into","","",231,[[["self"]],["result"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"not_found","","",231,[[["str"],["str"]],["e"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[["self"]],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"get_type_id","","",189,[[["self"]],["typeid"]]],[11,"try_into","","",189,[[["self"]],["result"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"not_found","","",189,[[["str"],["str"]],["e"]]],[11,"parse","syn::token","",93,[[["cursor"]],["presult",["add"]]]],[11,"description","","",93,[[],["option",["str"]]]],[11,"parse","","",94,[[["cursor"]],["presult",["addeq"]]]],[11,"description","","",94,[[],["option",["str"]]]],[11,"parse","","",95,[[["cursor"]],["presult",["and"]]]],[11,"description","","",95,[[],["option",["str"]]]],[11,"parse","","",96,[[["cursor"]],["presult",["andand"]]]],[11,"description","","",96,[[],["option",["str"]]]],[11,"parse","","",97,[[["cursor"]],["presult",["andeq"]]]],[11,"description","","",97,[[],["option",["str"]]]],[11,"parse","","",98,[[["cursor"]],["presult",["at"]]]],[11,"description","","",98,[[],["option",["str"]]]],[11,"parse","","",99,[[["cursor"]],["presult",["bang"]]]],[11,"description","","",99,[[],["option",["str"]]]],[11,"parse","","",100,[[["cursor"]],["presult",["caret"]]]],[11,"description","","",100,[[],["option",["str"]]]],[11,"parse","","",101,[[["cursor"]],["presult",["careteq"]]]],[11,"description","","",101,[[],["option",["str"]]]],[11,"parse","","",102,[[["cursor"]],["presult",["colon"]]]],[11,"description","","",102,[[],["option",["str"]]]],[11,"parse","","",103,[[["cursor"]],["presult",["colon2"]]]],[11,"description","","",103,[[],["option",["str"]]]],[11,"parse","","",104,[[["cursor"]],["presult",["comma"]]]],[11,"description","","",104,[[],["option",["str"]]]],[11,"parse","","",105,[[["cursor"]],["presult",["div"]]]],[11,"description","","",105,[[],["option",["str"]]]],[11,"parse","","",106,[[["cursor"]],["presult",["diveq"]]]],[11,"description","","",106,[[],["option",["str"]]]],[11,"parse","","",107,[[["cursor"]],["presult",["dot"]]]],[11,"description","","",107,[[],["option",["str"]]]],[11,"parse","","",108,[[["cursor"]],["presult",["dot2"]]]],[11,"description","","",108,[[],["option",["str"]]]],[11,"parse","","",109,[[["cursor"]],["presult",["dot3"]]]],[11,"description","","",109,[[],["option",["str"]]]],[11,"parse","","",110,[[["cursor"]],["presult",["dotdoteq"]]]],[11,"description","","",110,[[],["option",["str"]]]],[11,"parse","","",111,[[["cursor"]],["presult",["eq"]]]],[11,"description","","",111,[[],["option",["str"]]]],[11,"parse","","",112,[[["cursor"]],["presult",["eqeq"]]]],[11,"description","","",112,[[],["option",["str"]]]],[11,"parse","","",113,[[["cursor"]],["presult",["ge"]]]],[11,"description","","",113,[[],["option",["str"]]]],[11,"parse","","",114,[[["cursor"]],["presult",["gt"]]]],[11,"description","","",114,[[],["option",["str"]]]],[11,"parse","","",115,[[["cursor"]],["presult",["le"]]]],[11,"description","","",115,[[],["option",["str"]]]],[11,"parse","","",116,[[["cursor"]],["presult",["lt"]]]],[11,"description","","",116,[[],["option",["str"]]]],[11,"parse","","",117,[[["cursor"]],["presult",["muleq"]]]],[11,"description","","",117,[[],["option",["str"]]]],[11,"parse","","",118,[[["cursor"]],["presult",["ne"]]]],[11,"description","","",118,[[],["option",["str"]]]],[11,"parse","","",119,[[["cursor"]],["presult",["or"]]]],[11,"description","","",119,[[],["option",["str"]]]],[11,"parse","","",120,[[["cursor"]],["presult",["oreq"]]]],[11,"description","","",120,[[],["option",["str"]]]],[11,"parse","","",121,[[["cursor"]],["presult",["oror"]]]],[11,"description","","",121,[[],["option",["str"]]]],[11,"parse","","",122,[[["cursor"]],["presult",["pound"]]]],[11,"description","","",122,[[],["option",["str"]]]],[11,"parse","","",123,[[["cursor"]],["presult",["question"]]]],[11,"description","","",123,[[],["option",["str"]]]],[11,"parse","","",124,[[["cursor"]],["presult",["rarrow"]]]],[11,"description","","",124,[[],["option",["str"]]]],[11,"parse","","",125,[[["cursor"]],["presult",["larrow"]]]],[11,"description","","",125,[[],["option",["str"]]]],[11,"parse","","",126,[[["cursor"]],["presult",["rem"]]]],[11,"description","","",126,[[],["option",["str"]]]],[11,"parse","","",127,[[["cursor"]],["presult",["remeq"]]]],[11,"description","","",127,[[],["option",["str"]]]],[11,"parse","","",128,[[["cursor"]],["presult",["rocket"]]]],[11,"description","","",128,[[],["option",["str"]]]],[11,"parse","","",129,[[["cursor"]],["presult",["semi"]]]],[11,"description","","",129,[[],["option",["str"]]]],[11,"parse","","",130,[[["cursor"]],["presult",["shl"]]]],[11,"description","","",130,[[],["option",["str"]]]],[11,"parse","","",131,[[["cursor"]],["presult",["shleq"]]]],[11,"description","","",131,[[],["option",["str"]]]],[11,"parse","","",132,[[["cursor"]],["presult",["shr"]]]],[11,"description","","",132,[[],["option",["str"]]]],[11,"parse","","",133,[[["cursor"]],["presult",["shreq"]]]],[11,"description","","",133,[[],["option",["str"]]]],[11,"parse","","",134,[[["cursor"]],["presult",["star"]]]],[11,"description","","",134,[[],["option",["str"]]]],[11,"parse","","",135,[[["cursor"]],["presult",["sub"]]]],[11,"description","","",135,[[],["option",["str"]]]],[11,"parse","","",136,[[["cursor"]],["presult",["subeq"]]]],[11,"description","","",136,[[],["option",["str"]]]],[11,"parse","","",137,[[["cursor"]],["presult",["underscore"]]]],[11,"description","","",137,[[],["option",["str"]]]],[11,"parse","","",142,[[["cursor"]],["presult",["as"]]]],[11,"description","","",142,[[],["option",["str"]]]],[11,"parse","","",143,[[["cursor"]],["presult",["auto"]]]],[11,"description","","",143,[[],["option",["str"]]]],[11,"parse","","",144,[[["cursor"]],["presult",["box"]]]],[11,"description","","",144,[[],["option",["str"]]]],[11,"parse","","",145,[[["cursor"]],["presult",["break"]]]],[11,"description","","",145,[[],["option",["str"]]]],[11,"parse","","",146,[[["cursor"]],["presult",["capself"]]]],[11,"description","","",146,[[],["option",["str"]]]],[11,"parse","","",147,[[["cursor"]],["presult",["catch"]]]],[11,"description","","",147,[[],["option",["str"]]]],[11,"parse","","",148,[[["cursor"]],["presult",["const"]]]],[11,"description","","",148,[[],["option",["str"]]]],[11,"parse","","",149,[[["cursor"]],["presult",["continue"]]]],[11,"description","","",149,[[],["option",["str"]]]],[11,"parse","","",150,[[["cursor"]],["presult",["crate"]]]],[11,"description","","",150,[[],["option",["str"]]]],[11,"parse","","",151,[[["cursor"]],["presult",["default"]]]],[11,"description","","",151,[[],["option",["str"]]]],[11,"parse","","",152,[[["cursor"]],["presult",["do"]]]],[11,"description","","",152,[[],["option",["str"]]]],[11,"parse","","",153,[[["cursor"]],["presult",["dyn"]]]],[11,"description","","",153,[[],["option",["str"]]]],[11,"parse","","",154,[[["cursor"]],["presult",["else"]]]],[11,"description","","",154,[[],["option",["str"]]]],[11,"parse","","",155,[[["cursor"]],["presult",["enum"]]]],[11,"description","","",155,[[],["option",["str"]]]],[11,"parse","","",156,[[["cursor"]],["presult",["extern"]]]],[11,"description","","",156,[[],["option",["str"]]]],[11,"parse","","",157,[[["cursor"]],["presult",["fn"]]]],[11,"description","","",157,[[],["option",["str"]]]],[11,"parse","","",158,[[["cursor"]],["presult",["for"]]]],[11,"description","","",158,[[],["option",["str"]]]],[11,"parse","","",159,[[["cursor"]],["presult",["if"]]]],[11,"description","","",159,[[],["option",["str"]]]],[11,"parse","","",160,[[["cursor"]],["presult",["impl"]]]],[11,"description","","",160,[[],["option",["str"]]]],[11,"parse","","",161,[[["cursor"]],["presult",["in"]]]],[11,"description","","",161,[[],["option",["str"]]]],[11,"parse","","",162,[[["cursor"]],["presult",["let"]]]],[11,"description","","",162,[[],["option",["str"]]]],[11,"parse","","",163,[[["cursor"]],["presult",["loop"]]]],[11,"description","","",163,[[],["option",["str"]]]],[11,"parse","","",164,[[["cursor"]],["presult",["macro"]]]],[11,"description","","",164,[[],["option",["str"]]]],[11,"parse","","",165,[[["cursor"]],["presult",["match"]]]],[11,"description","","",165,[[],["option",["str"]]]],[11,"parse","","",166,[[["cursor"]],["presult",["mod"]]]],[11,"description","","",166,[[],["option",["str"]]]],[11,"parse","","",167,[[["cursor"]],["presult",["move"]]]],[11,"description","","",167,[[],["option",["str"]]]],[11,"parse","","",168,[[["cursor"]],["presult",["mut"]]]],[11,"description","","",168,[[],["option",["str"]]]],[11,"parse","","",169,[[["cursor"]],["presult",["pub"]]]],[11,"description","","",169,[[],["option",["str"]]]],[11,"parse","","",170,[[["cursor"]],["presult",["ref"]]]],[11,"description","","",170,[[],["option",["str"]]]],[11,"parse","","",171,[[["cursor"]],["presult",["return"]]]],[11,"description","","",171,[[],["option",["str"]]]],[11,"parse","","",172,[[["cursor"]],["presult",["self_"]]]],[11,"description","","",172,[[],["option",["str"]]]],[11,"parse","","",173,[[["cursor"]],["presult",["static"]]]],[11,"description","","",173,[[],["option",["str"]]]],[11,"parse","","",174,[[["cursor"]],["presult",["struct"]]]],[11,"description","","",174,[[],["option",["str"]]]],[11,"parse","","",175,[[["cursor"]],["presult",["super"]]]],[11,"description","","",175,[[],["option",["str"]]]],[11,"parse","","",176,[[["cursor"]],["presult",["trait"]]]],[11,"description","","",176,[[],["option",["str"]]]],[11,"parse","","",177,[[["cursor"]],["presult",["type"]]]],[11,"description","","",177,[[],["option",["str"]]]],[11,"parse","","",178,[[["cursor"]],["presult",["union"]]]],[11,"description","","",178,[[],["option",["str"]]]],[11,"parse","","",179,[[["cursor"]],["presult",["unsafe"]]]],[11,"description","","",179,[[],["option",["str"]]]],[11,"parse","","",180,[[["cursor"]],["presult",["use"]]]],[11,"description","","",180,[[],["option",["str"]]]],[11,"parse","","",181,[[["cursor"]],["presult",["where"]]]],[11,"description","","",181,[[],["option",["str"]]]],[11,"parse","","",182,[[["cursor"]],["presult",["while"]]]],[11,"description","","",182,[[],["option",["str"]]]],[11,"parse","","",183,[[["cursor"]],["presult",["yield"]]]],[11,"description","","",183,[[],["option",["str"]]]],[11,"parse","syn","",6,[[["cursor"]],["presult"]]],[11,"description","","",6,[[],["option",["str"]]]],[11,"parse","","",4,[[["cursor"]],["presult"]]],[11,"description","","",4,[[],["option",["str"]]]],[11,"parse","","",5,[[["cursor"]],["presult"]]],[11,"description","","",5,[[],["option",["str"]]]],[11,"parse","","",73,[[["cursor"]],["presult"]]],[11,"description","","",73,[[],["option",["str"]]]],[11,"parse","","",74,[[["cursor"]],["presult"]]],[11,"description","","",74,[[],["option",["str"]]]],[11,"parse","","",14,[[["cursor"]],["presult"]]],[11,"description","","",14,[[],["option",["str"]]]],[11,"parse","","",15,[[["cursor"]],["presult"]]],[11,"description","","",15,[[],["option",["str"]]]],[11,"parse","","",16,[[["cursor"]],["presult"]]],[11,"description","","",16,[[],["option",["str"]]]],[11,"parse","","",22,[[["cursor"]],["presult"]]],[11,"description","","",22,[[],["option",["str"]]]],[11,"parse","","",76,[[["cursor"]],["presult"]]],[11,"description","","",76,[[],["option",["str"]]]],[11,"parse","","",23,[[["cursor"]],["presult"]]],[11,"description","","",23,[[],["option",["str"]]]],[11,"parse","","",20,[[["cursor"]],["presult"]]],[11,"description","","",20,[[],["option",["str"]]]],[11,"parse","","",28,[[["cursor"]],["presult"]]],[11,"description","","",28,[[],["option",["str"]]]],[11,"parse","","",78,[[["cursor"]],["presult"]]],[11,"description","","",78,[[],["option",["str"]]]],[11,"parse","","",27,[[["cursor"]],["presult"]]],[11,"description","","",27,[[],["option",["str"]]]],[11,"parse","","",77,[[["cursor"]],["presult"]]],[11,"description","","",77,[[],["option",["str"]]]],[11,"parse","","",21,[[["cursor"]],["presult"]]],[11,"description","","",21,[[],["option",["str"]]]],[11,"parse","","",29,[[["cursor"]],["presult"]]],[11,"description","","",29,[[],["option",["str"]]]],[11,"parse","","",79,[[["cursor"]],["presult"]]],[11,"description","","",79,[[],["option",["str"]]]],[11,"parse","","",30,[[["cursor"]],["presult"]]],[11,"description","","",30,[[],["option",["str"]]]],[11,"parse","","",31,[[["cursor"]],["presult"]]],[11,"description","","",31,[[],["option",["str"]]]],[11,"parse","","",82,[[["cursor"]],["presult"]]],[11,"description","","",82,[[],["option",["str"]]]],[11,"parse","","",38,[[["cursor"]],["presult"]]],[11,"description","","",38,[[],["option",["str"]]]],[11,"parse","","",34,[[["cursor"]],["presult"]]],[11,"description","","",34,[[],["option",["str"]]]],[11,"parse","","",33,[[["cursor"]],["presult"]]],[11,"description","","",33,[[],["option",["str"]]]],[11,"parse","","",35,[[["cursor"]],["presult"]]],[11,"description","","",35,[[],["option",["str"]]]],[11,"parse","","",37,[[["cursor"]],["presult"]]],[11,"description","","",37,[[],["option",["str"]]]],[11,"parse","","",36,[[["cursor"]],["presult"]]],[11,"description","","",36,[[],["option",["str"]]]],[11,"parse","","",32,[[["cursor"]],["presult"]]],[11,"description","","",32,[[],["option",["str"]]]],[11,"parse","","",40,[[["cursor"]],["presult"]]],[11,"description","","",40,[[],["option",["str"]]]],[11,"parse","","",44,[[["cursor"]],["presult"]]],[11,"description","","",44,[[],["option",["str"]]]],[11,"parse","","",87,[[["cursor"]],["presult"]]],[11,"description","","",87,[[],["option",["str"]]]],[11,"parse","","",90,[[["cursor"]],["presult"]]],[11,"description","","",90,[[],["option",["str"]]]],[11,"parse","","",58,[[["cursor"]],["presult"]]],[11,"description","","",58,[[],["option",["str"]]]],[11,"parse","","",47,[[["cursor"]],["presult"]]],[11,"description","","",47,[[],["option",["str"]]]],[11,"parse","","",56,[[["cursor"]],["presult"]]],[11,"description","","",56,[[],["option",["str"]]]],[11,"parse","","",57,[[["cursor"]],["presult"]]],[11,"description","","",57,[[],["option",["str"]]]],[11,"parse","","",48,[[["cursor"]],["presult"]]],[11,"description","","",48,[[],["option",["str"]]]],[11,"parse","","",53,[[["cursor"]],["presult"]]],[11,"description","","",53,[[],["option",["str"]]]],[11,"parse","","",51,[[["cursor"]],["presult"]]],[11,"description","","",51,[[],["option",["str"]]]],[11,"parse","","",60,[[["cursor"]],["presult"]]],[11,"description","","",60,[[],["option",["str"]]]],[11,"parse","","",52,[[["cursor"]],["presult"]]],[11,"description","","",52,[[],["option",["str"]]]],[11,"parse","","",55,[[["cursor"]],["presult"]]],[11,"description","","",55,[[],["option",["str"]]]],[11,"parse","","",89,[[["cursor"]],["presult"]]],[11,"description","","",89,[[],["option",["str"]]]],[11,"parse","","",59,[[["cursor"]],["presult"]]],[11,"description","","",59,[[],["option",["str"]]]],[11,"parse","","",50,[[["cursor"]],["presult"]]],[11,"description","","",50,[[],["option",["str"]]]],[11,"parse","","",49,[[["cursor"]],["presult"]]],[11,"description","","",49,[[],["option",["str"]]]],[11,"parse","","",54,[[["cursor"]],["presult"]]],[11,"description","","",54,[[],["option",["str"]]]],[11,"parse","","",46,[[["cursor"]],["presult"]]],[11,"description","","",46,[[],["option",["str"]]]],[11,"parse","","",88,[[["cursor"]],["presult"]]],[11,"description","","",88,[[],["option",["str"]]]],[11,"parse","","",45,[[["cursor"]],["presult"]]],[11,"description","","",45,[[],["option",["str"]]]],[11,"parse","","",65,[[["cursor"]],["presult"]]],[11,"description","","",65,[[],["option",["str"]]]],[11,"parse","","",91,[[["cursor"]],["presult"]]],[11,"parse","","",62,[[["cursor"]],["presult"]]],[11,"description","","",62,[[],["option",["str"]]]],[11,"parse","","",64,[[["cursor"]],["presult"]]],[11,"description","","",64,[[],["option",["str"]]]],[11,"parse","","",66,[[["cursor"]],["presult"]]],[11,"description","","",66,[[],["option",["str"]]]],[11,"parse","","",63,[[["cursor"]],["presult"]]],[11,"description","","",63,[[],["option",["str"]]]],[11,"clone","syn::token","",93,[[["self"]],["add"]]],[11,"clone","","",94,[[["self"]],["addeq"]]],[11,"clone","","",95,[[["self"]],["and"]]],[11,"clone","","",96,[[["self"]],["andand"]]],[11,"clone","","",97,[[["self"]],["andeq"]]],[11,"clone","","",98,[[["self"]],["at"]]],[11,"clone","","",99,[[["self"]],["bang"]]],[11,"clone","","",100,[[["self"]],["caret"]]],[11,"clone","","",101,[[["self"]],["careteq"]]],[11,"clone","","",102,[[["self"]],["colon"]]],[11,"clone","","",103,[[["self"]],["colon2"]]],[11,"clone","","",104,[[["self"]],["comma"]]],[11,"clone","","",105,[[["self"]],["div"]]],[11,"clone","","",106,[[["self"]],["diveq"]]],[11,"clone","","",107,[[["self"]],["dot"]]],[11,"clone","","",108,[[["self"]],["dot2"]]],[11,"clone","","",109,[[["self"]],["dot3"]]],[11,"clone","","",110,[[["self"]],["dotdoteq"]]],[11,"clone","","",111,[[["self"]],["eq"]]],[11,"clone","","",112,[[["self"]],["eqeq"]]],[11,"clone","","",113,[[["self"]],["ge"]]],[11,"clone","","",114,[[["self"]],["gt"]]],[11,"clone","","",115,[[["self"]],["le"]]],[11,"clone","","",116,[[["self"]],["lt"]]],[11,"clone","","",117,[[["self"]],["muleq"]]],[11,"clone","","",118,[[["self"]],["ne"]]],[11,"clone","","",119,[[["self"]],["or"]]],[11,"clone","","",120,[[["self"]],["oreq"]]],[11,"clone","","",121,[[["self"]],["oror"]]],[11,"clone","","",122,[[["self"]],["pound"]]],[11,"clone","","",123,[[["self"]],["question"]]],[11,"clone","","",124,[[["self"]],["rarrow"]]],[11,"clone","","",125,[[["self"]],["larrow"]]],[11,"clone","","",126,[[["self"]],["rem"]]],[11,"clone","","",127,[[["self"]],["remeq"]]],[11,"clone","","",128,[[["self"]],["rocket"]]],[11,"clone","","",129,[[["self"]],["semi"]]],[11,"clone","","",130,[[["self"]],["shl"]]],[11,"clone","","",131,[[["self"]],["shleq"]]],[11,"clone","","",132,[[["self"]],["shr"]]],[11,"clone","","",133,[[["self"]],["shreq"]]],[11,"clone","","",134,[[["self"]],["star"]]],[11,"clone","","",135,[[["self"]],["sub"]]],[11,"clone","","",136,[[["self"]],["subeq"]]],[11,"clone","","",137,[[["self"]],["underscore"]]],[11,"clone","","",138,[[["self"]],["brace"]]],[11,"clone","","",139,[[["self"]],["bracket"]]],[11,"clone","","",140,[[["self"]],["paren"]]],[11,"clone","","",141,[[["self"]],["group"]]],[11,"clone","","",142,[[["self"]],["as"]]],[11,"clone","","",143,[[["self"]],["auto"]]],[11,"clone","","",144,[[["self"]],["box"]]],[11,"clone","","",145,[[["self"]],["break"]]],[11,"clone","","",146,[[["self"]],["capself"]]],[11,"clone","","",147,[[["self"]],["catch"]]],[11,"clone","","",148,[[["self"]],["const"]]],[11,"clone","","",149,[[["self"]],["continue"]]],[11,"clone","","",150,[[["self"]],["crate"]]],[11,"clone","","",151,[[["self"]],["default"]]],[11,"clone","","",152,[[["self"]],["do"]]],[11,"clone","","",153,[[["self"]],["dyn"]]],[11,"clone","","",154,[[["self"]],["else"]]],[11,"clone","","",155,[[["self"]],["enum"]]],[11,"clone","","",156,[[["self"]],["extern"]]],[11,"clone","","",157,[[["self"]],["fn"]]],[11,"clone","","",158,[[["self"]],["for"]]],[11,"clone","","",159,[[["self"]],["if"]]],[11,"clone","","",160,[[["self"]],["impl"]]],[11,"clone","","",161,[[["self"]],["in"]]],[11,"clone","","",162,[[["self"]],["let"]]],[11,"clone","","",163,[[["self"]],["loop"]]],[11,"clone","","",164,[[["self"]],["macro"]]],[11,"clone","","",165,[[["self"]],["match"]]],[11,"clone","","",166,[[["self"]],["mod"]]],[11,"clone","","",167,[[["self"]],["move"]]],[11,"clone","","",168,[[["self"]],["mut"]]],[11,"clone","","",169,[[["self"]],["pub"]]],[11,"clone","","",170,[[["self"]],["ref"]]],[11,"clone","","",171,[[["self"]],["return"]]],[11,"clone","","",172,[[["self"]],["self_"]]],[11,"clone","","",173,[[["self"]],["static"]]],[11,"clone","","",174,[[["self"]],["struct"]]],[11,"clone","","",175,[[["self"]],["super"]]],[11,"clone","","",176,[[["self"]],["trait"]]],[11,"clone","","",177,[[["self"]],["type"]]],[11,"clone","","",178,[[["self"]],["union"]]],[11,"clone","","",179,[[["self"]],["unsafe"]]],[11,"clone","","",180,[[["self"]],["use"]]],[11,"clone","","",181,[[["self"]],["where"]]],[11,"clone","","",182,[[["self"]],["while"]]],[11,"clone","","",183,[[["self"]],["yield"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",69,[[["self"]],["attrstyle"]]],[11,"clone","","",70,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",71,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",72,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",73,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",74,[[["self"]],["expr"]]],[11,"clone","","",197,[[["self"]],["exprbox"]]],[11,"clone","","",207,[[["self"]],["exprinplace"]]],[11,"clone","","",193,[[["self"]],["exprarray"]]],[11,"clone","","",11,[[["self"]],["exprcall"]]],[11,"clone","","",211,[[["self"]],["exprmethodcall"]]],[11,"clone","","",217,[[["self"]],["exprtuple"]]],[11,"clone","","",10,[[["self"]],["exprbinary"]]],[11,"clone","","",17,[[["self"]],["exprunary"]]],[11,"clone","","",14,[[["self"]],["exprlit"]]],[11,"clone","","",12,[[["self"]],["exprcast"]]],[11,"clone","","",218,[[["self"]],["exprtype"]]],[11,"clone","","",205,[[["self"]],["exprif"]]],[11,"clone","","",206,[[["self"]],["expriflet"]]],[11,"clone","","",220,[[["self"]],["exprwhile"]]],[11,"clone","","",221,[[["self"]],["exprwhilelet"]]],[11,"clone","","",203,[[["self"]],["exprforloop"]]],[11,"clone","","",208,[[["self"]],["exprloop"]]],[11,"clone","","",210,[[["self"]],["exprmatch"]]],[11,"clone","","",200,[[["self"]],["exprclosure"]]],[11,"clone","","",219,[[["self"]],["exprunsafe"]]],[11,"clone","","",196,[[["self"]],["exprblock"]]],[11,"clone","","",194,[[["self"]],["exprassign"]]],[11,"clone","","",195,[[["self"]],["exprassignop"]]],[11,"clone","","",202,[[["self"]],["exprfield"]]],[11,"clone","","",13,[[["self"]],["exprindex"]]],[11,"clone","","",212,[[["self"]],["exprrange"]]],[11,"clone","","",16,[[["self"]],["exprpath"]]],[11,"clone","","",192,[[["self"]],["expraddrof"]]],[11,"clone","","",198,[[["self"]],["exprbreak"]]],[11,"clone","","",201,[[["self"]],["exprcontinue"]]],[11,"clone","","",214,[[["self"]],["exprreturn"]]],[11,"clone","","",209,[[["self"]],["exprmacro"]]],[11,"clone","","",215,[[["self"]],["exprstruct"]]],[11,"clone","","",213,[[["self"]],["exprrepeat"]]],[11,"clone","","",15,[[["self"]],["exprparen"]]],[11,"clone","","",204,[[["self"]],["exprgroup"]]],[11,"clone","","",216,[[["self"]],["exprtry"]]],[11,"clone","","",199,[[["self"]],["exprcatch"]]],[11,"clone","","",222,[[["self"]],["expryield"]]],[11,"clone","","",18,[[["self"]],["exprverbatim"]]],[11,"clone","","",75,[[["self"]],["member"]]],[11,"clone","","",19,[[["self"]],["index"]]],[11,"clone","","",22,[[["self"]],["generics"]]],[11,"clone","","",76,[[["self"]],["genericparam"]]],[11,"clone","","",28,[[["self"]],["typeparam"]]],[11,"clone","","",23,[[["self"]],["lifetimedef"]]],[11,"clone","","",21,[[["self"]],["constparam"]]],[11,"clone","","",223,[[["self"]],["implgenerics"]]],[11,"clone","","",184,[[["self"]],["typegenerics"]]],[11,"clone","","",224,[[["self"]],["turbofish"]]],[11,"clone","","",20,[[["self"]],["boundlifetimes"]]],[11,"clone","","",78,[[["self"]],["typeparambound"]]],[11,"clone","","",27,[[["self"]],["traitbound"]]],[11,"clone","","",77,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",29,[[["self"]],["whereclause"]]],[11,"clone","","",79,[[["self"]],["wherepredicate"]]],[11,"clone","","",26,[[["self"]],["predicatetype"]]],[11,"clone","","",25,[[["self"]],["predicatelifetime"]]],[11,"clone","","",24,[[["self"]],["predicateeq"]]],[11,"clone","","",30,[[["self"]],["ident"]]],[11,"clone","","",31,[[["self"]],["lifetime"]]],[11,"clone","","",82,[[["self"]],["lit"]]],[11,"clone","","",38,[[["self"]],["litstr"]]],[11,"clone","","",34,[[["self"]],["litbytestr"]]],[11,"clone","","",33,[[["self"]],["litbyte"]]],[11,"clone","","",35,[[["self"]],["litchar"]]],[11,"clone","","",37,[[["self"]],["litint"]]],[11,"clone","","",36,[[["self"]],["litfloat"]]],[11,"clone","","",32,[[["self"]],["litbool"]]],[11,"clone","","",39,[[["self"]],["litverbatim"]]],[11,"clone","","",83,[[["self"]],["strstyle"]]],[11,"clone","","",81,[[["self"]],["intsuffix"]]],[11,"clone","","",80,[[["self"]],["floatsuffix"]]],[11,"clone","","",40,[[["self"]],["macro"]]],[11,"clone","","",84,[[["self"]],["macrodelimiter"]]],[11,"clone","","",44,[[["self"]],["deriveinput"]]],[11,"clone","","",85,[[["self"]],["data"]]],[11,"clone","","",42,[[["self"]],["datastruct"]]],[11,"clone","","",41,[[["self"]],["dataenum"]]],[11,"clone","","",43,[[["self"]],["dataunion"]]],[11,"clone","","",86,[[["self"]],["binop"]]],[11,"clone","","",87,[[["self"]],["unop"]]],[11,"clone","","",90,[[["self"]],["type"]]],[11,"clone","","",58,[[["self"]],["typeslice"]]],[11,"clone","","",47,[[["self"]],["typearray"]]],[11,"clone","","",56,[[["self"]],["typeptr"]]],[11,"clone","","",57,[[["self"]],["typereference"]]],[11,"clone","","",48,[[["self"]],["typebarefn"]]],[11,"clone","","",53,[[["self"]],["typenever"]]],[11,"clone","","",60,[[["self"]],["typetuple"]]],[11,"clone","","",55,[[["self"]],["typepath"]]],[11,"clone","","",59,[[["self"]],["typetraitobject"]]],[11,"clone","","",50,[[["self"]],["typeimpltrait"]]],[11,"clone","","",54,[[["self"]],["typeparen"]]],[11,"clone","","",49,[[["self"]],["typegroup"]]],[11,"clone","","",51,[[["self"]],["typeinfer"]]],[11,"clone","","",52,[[["self"]],["typemacro"]]],[11,"clone","","",61,[[["self"]],["typeverbatim"]]],[11,"clone","","",45,[[["self"]],["abi"]]],[11,"clone","","",46,[[["self"]],["barefnarg"]]],[11,"clone","","",88,[[["self"]],["barefnargname"]]],[11,"clone","","",89,[[["self"]],["returntype"]]],[11,"clone","","",65,[[["self"]],["path"]]],[11,"clone","","",68,[[["self"]],["pathtokens"]]],[11,"clone","","",66,[[["self"]],["pathsegment"]]],[11,"clone","","",92,[[["self"]],["patharguments"]]],[11,"clone","","",91,[[["self"]],["genericargument"]]],[11,"clone","","",62,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",63,[[["self"]],["binding"]]],[11,"clone","","",64,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",67,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",186,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",190,[[["self"]],["punctuated"]]],[11,"extend","","",190,[[["self"],["i"]]]],[11,"extend","","",190,[[["self"],["i"]]]],[11,"from","syn::token","",93,[[["span"]],["self"]]],[11,"from","","",94,[[["span"]],["self"]]],[11,"from","","",95,[[["span"]],["self"]]],[11,"from","","",96,[[["span"]],["self"]]],[11,"from","","",97,[[["span"]],["self"]]],[11,"from","","",98,[[["span"]],["self"]]],[11,"from","","",99,[[["span"]],["self"]]],[11,"from","","",100,[[["span"]],["self"]]],[11,"from","","",101,[[["span"]],["self"]]],[11,"from","","",102,[[["span"]],["self"]]],[11,"from","","",103,[[["span"]],["self"]]],[11,"from","","",104,[[["span"]],["self"]]],[11,"from","","",105,[[["span"]],["self"]]],[11,"from","","",106,[[["span"]],["self"]]],[11,"from","","",107,[[["span"]],["self"]]],[11,"from","","",108,[[["span"]],["self"]]],[11,"from","","",109,[[["span"]],["self"]]],[11,"from","","",110,[[["span"]],["self"]]],[11,"from","","",111,[[["span"]],["self"]]],[11,"from","","",112,[[["span"]],["self"]]],[11,"from","","",113,[[["span"]],["self"]]],[11,"from","","",114,[[["span"]],["self"]]],[11,"from","","",115,[[["span"]],["self"]]],[11,"from","","",116,[[["span"]],["self"]]],[11,"from","","",117,[[["span"]],["self"]]],[11,"from","","",118,[[["span"]],["self"]]],[11,"from","","",119,[[["span"]],["self"]]],[11,"from","","",120,[[["span"]],["self"]]],[11,"from","","",121,[[["span"]],["self"]]],[11,"from","","",122,[[["span"]],["self"]]],[11,"from","","",123,[[["span"]],["self"]]],[11,"from","","",124,[[["span"]],["self"]]],[11,"from","","",125,[[["span"]],["self"]]],[11,"from","","",126,[[["span"]],["self"]]],[11,"from","","",127,[[["span"]],["self"]]],[11,"from","","",128,[[["span"]],["self"]]],[11,"from","","",129,[[["span"]],["self"]]],[11,"from","","",130,[[["span"]],["self"]]],[11,"from","","",131,[[["span"]],["self"]]],[11,"from","","",132,[[["span"]],["self"]]],[11,"from","","",133,[[["span"]],["self"]]],[11,"from","","",134,[[["span"]],["self"]]],[11,"from","","",135,[[["span"]],["self"]]],[11,"from","","",136,[[["span"]],["self"]]],[11,"from","","",137,[[["span"]],["self"]]],[11,"from","","",138,[[["span"]],["self"]]],[11,"from","","",139,[[["span"]],["self"]]],[11,"from","","",140,[[["span"]],["self"]]],[11,"from","","",141,[[["span"]],["self"]]],[11,"from","","",142,[[["span"]],["self"]]],[11,"from","","",143,[[["span"]],["self"]]],[11,"from","","",144,[[["span"]],["self"]]],[11,"from","","",145,[[["span"]],["self"]]],[11,"from","","",146,[[["span"]],["self"]]],[11,"from","","",147,[[["span"]],["self"]]],[11,"from","","",148,[[["span"]],["self"]]],[11,"from","","",149,[[["span"]],["self"]]],[11,"from","","",150,[[["span"]],["self"]]],[11,"from","","",151,[[["span"]],["self"]]],[11,"from","","",152,[[["span"]],["self"]]],[11,"from","","",153,[[["span"]],["self"]]],[11,"from","","",154,[[["span"]],["self"]]],[11,"from","","",155,[[["span"]],["self"]]],[11,"from","","",156,[[["span"]],["self"]]],[11,"from","","",157,[[["span"]],["self"]]],[11,"from","","",158,[[["span"]],["self"]]],[11,"from","","",159,[[["span"]],["self"]]],[11,"from","","",160,[[["span"]],["self"]]],[11,"from","","",161,[[["span"]],["self"]]],[11,"from","","",162,[[["span"]],["self"]]],[11,"from","","",163,[[["span"]],["self"]]],[11,"from","","",164,[[["span"]],["self"]]],[11,"from","","",165,[[["span"]],["self"]]],[11,"from","","",166,[[["span"]],["self"]]],[11,"from","","",167,[[["span"]],["self"]]],[11,"from","","",168,[[["span"]],["self"]]],[11,"from","","",169,[[["span"]],["self"]]],[11,"from","","",170,[[["span"]],["self"]]],[11,"from","","",171,[[["span"]],["self"]]],[11,"from","","",172,[[["span"]],["self"]]],[11,"from","","",173,[[["span"]],["self"]]],[11,"from","","",174,[[["span"]],["self"]]],[11,"from","","",175,[[["span"]],["self"]]],[11,"from","","",176,[[["span"]],["self"]]],[11,"from","","",177,[[["span"]],["self"]]],[11,"from","","",178,[[["span"]],["self"]]],[11,"from","","",179,[[["span"]],["self"]]],[11,"from","","",180,[[["span"]],["self"]]],[11,"from","","",181,[[["span"]],["self"]]],[11,"from","","",182,[[["span"]],["self"]]],[11,"from","","",183,[[["span"]],["self"]]],[11,"from","syn","",70,[[["ident"]],["meta"]]],[11,"from","","",70,[[["metalist"]],["meta"]]],[11,"from","","",70,[[["metanamevalue"]],["meta"]]],[11,"from","","",71,[[["meta"]],["nestedmeta"]]],[11,"from","","",71,[[["lit"]],["nestedmeta"]]],[11,"from","","",72,[[["fieldsnamed"]],["fields"]]],[11,"from","","",72,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",73,[[["vispublic"]],["visibility"]]],[11,"from","","",73,[[["viscrate"]],["visibility"]]],[11,"from","","",73,[[["visrestricted"]],["visibility"]]],[11,"from","","",74,[[["exprbox"]],["expr"]]],[11,"from","","",74,[[["exprinplace"]],["expr"]]],[11,"from","","",74,[[["exprarray"]],["expr"]]],[11,"from","","",74,[[["exprcall"]],["expr"]]],[11,"from","","",74,[[["exprmethodcall"]],["expr"]]],[11,"from","","",74,[[["exprtuple"]],["expr"]]],[11,"from","","",74,[[["exprbinary"]],["expr"]]],[11,"from","","",74,[[["exprunary"]],["expr"]]],[11,"from","","",74,[[["exprlit"]],["expr"]]],[11,"from","","",74,[[["exprcast"]],["expr"]]],[11,"from","","",74,[[["exprtype"]],["expr"]]],[11,"from","","",74,[[["exprif"]],["expr"]]],[11,"from","","",74,[[["expriflet"]],["expr"]]],[11,"from","","",74,[[["exprwhile"]],["expr"]]],[11,"from","","",74,[[["exprwhilelet"]],["expr"]]],[11,"from","","",74,[[["exprforloop"]],["expr"]]],[11,"from","","",74,[[["exprloop"]],["expr"]]],[11,"from","","",74,[[["exprmatch"]],["expr"]]],[11,"from","","",74,[[["exprclosure"]],["expr"]]],[11,"from","","",74,[[["exprunsafe"]],["expr"]]],[11,"from","","",74,[[["exprblock"]],["expr"]]],[11,"from","","",74,[[["exprassign"]],["expr"]]],[11,"from","","",74,[[["exprassignop"]],["expr"]]],[11,"from","","",74,[[["exprfield"]],["expr"]]],[11,"from","","",74,[[["exprindex"]],["expr"]]],[11,"from","","",74,[[["exprrange"]],["expr"]]],[11,"from","","",74,[[["exprpath"]],["expr"]]],[11,"from","","",74,[[["expraddrof"]],["expr"]]],[11,"from","","",74,[[["exprbreak"]],["expr"]]],[11,"from","","",74,[[["exprcontinue"]],["expr"]]],[11,"from","","",74,[[["exprreturn"]],["expr"]]],[11,"from","","",74,[[["exprmacro"]],["expr"]]],[11,"from","","",74,[[["exprstruct"]],["expr"]]],[11,"from","","",74,[[["exprrepeat"]],["expr"]]],[11,"from","","",74,[[["exprparen"]],["expr"]]],[11,"from","","",74,[[["exprgroup"]],["expr"]]],[11,"from","","",74,[[["exprtry"]],["expr"]]],[11,"from","","",74,[[["exprcatch"]],["expr"]]],[11,"from","","",74,[[["expryield"]],["expr"]]],[11,"from","","",74,[[["exprverbatim"]],["expr"]]],[11,"from","","",19,[[["usize"]],["index"]]],[11,"from","","",76,[[["typeparam"]],["genericparam"]]],[11,"from","","",76,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",76,[[["constparam"]],["genericparam"]]],[11,"from","","",28,[[["ident"]],["self"]]],[11,"from","","",78,[[["traitbound"]],["typeparambound"]]],[11,"from","","",78,[[["lifetime"]],["typeparambound"]]],[11,"from","","",79,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",79,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",79,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",30,[[["str"]],["self"]]],[11,"from","","",30,[[["self_"]],["self"]]],[11,"from","","",30,[[["capself"]],["self"]]],[11,"from","","",30,[[["super"]],["self"]]],[11,"from","","",30,[[["crate"]],["self"]]],[11,"from","","",30,[[["cow",["str"]]],["self"]]],[11,"from","","",30,[[["string"]],["self"]]],[11,"from","","",82,[[["litstr"]],["lit"]]],[11,"from","","",82,[[["litbytestr"]],["lit"]]],[11,"from","","",82,[[["litbyte"]],["lit"]]],[11,"from","","",82,[[["litchar"]],["lit"]]],[11,"from","","",82,[[["litint"]],["lit"]]],[11,"from","","",82,[[["litfloat"]],["lit"]]],[11,"from","","",82,[[["litbool"]],["lit"]]],[11,"from","","",82,[[["litverbatim"]],["lit"]]],[11,"from","","",85,[[["datastruct"]],["data"]]],[11,"from","","",85,[[["dataenum"]],["data"]]],[11,"from","","",85,[[["dataunion"]],["data"]]],[11,"from","","",90,[[["typeslice"]],["type"]]],[11,"from","","",90,[[["typearray"]],["type"]]],[11,"from","","",90,[[["typeptr"]],["type"]]],[11,"from","","",90,[[["typereference"]],["type"]]],[11,"from","","",90,[[["typebarefn"]],["type"]]],[11,"from","","",90,[[["typenever"]],["type"]]],[11,"from","","",90,[[["typetuple"]],["type"]]],[11,"from","","",90,[[["typepath"]],["type"]]],[11,"from","","",90,[[["typetraitobject"]],["type"]]],[11,"from","","",90,[[["typeimpltrait"]],["type"]]],[11,"from","","",90,[[["typeparen"]],["type"]]],[11,"from","","",90,[[["typegroup"]],["type"]]],[11,"from","","",90,[[["typeinfer"]],["type"]]],[11,"from","","",90,[[["typemacro"]],["type"]]],[11,"from","","",90,[[["typeverbatim"]],["type"]]],[11,"from","","",65,[[["t"]],["self"]]],[11,"from","","",66,[[["t"]],["self"]]],[11,"next","syn::punctuated","",226,[[["self"]],["option"]]],[11,"next","","",227,[[["self"]],["option"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"next","","",229,[[["self"]],["option"]]],[11,"next","","",230,[[["self"]],["option"]]],[11,"next","","",231,[[["self"]],["option"]]],[11,"as_ref","syn","",30,[[["self"]],["str"]]],[11,"partial_cmp","","",30,[[["self"],["ident"]],["option",["ordering"]]]],[11,"partial_cmp","","",31,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"default","syn::token","",93,[[],["self"]]],[11,"default","","",94,[[],["self"]]],[11,"default","","",95,[[],["self"]]],[11,"default","","",96,[[],["self"]]],[11,"default","","",97,[[],["self"]]],[11,"default","","",98,[[],["self"]]],[11,"default","","",99,[[],["self"]]],[11,"default","","",100,[[],["self"]]],[11,"default","","",101,[[],["self"]]],[11,"default","","",102,[[],["self"]]],[11,"default","","",103,[[],["self"]]],[11,"default","","",104,[[],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"default","","",106,[[],["self"]]],[11,"default","","",107,[[],["self"]]],[11,"default","","",108,[[],["self"]]],[11,"default","","",109,[[],["self"]]],[11,"default","","",110,[[],["self"]]],[11,"default","","",111,[[],["self"]]],[11,"default","","",112,[[],["self"]]],[11,"default","","",113,[[],["self"]]],[11,"default","","",114,[[],["self"]]],[11,"default","","",115,[[],["self"]]],[11,"default","","",116,[[],["self"]]],[11,"default","","",117,[[],["self"]]],[11,"default","","",118,[[],["self"]]],[11,"default","","",119,[[],["self"]]],[11,"default","","",120,[[],["self"]]],[11,"default","","",121,[[],["self"]]],[11,"default","","",122,[[],["self"]]],[11,"default","","",123,[[],["self"]]],[11,"default","","",124,[[],["self"]]],[11,"default","","",125,[[],["self"]]],[11,"default","","",126,[[],["self"]]],[11,"default","","",127,[[],["self"]]],[11,"default","","",128,[[],["self"]]],[11,"default","","",129,[[],["self"]]],[11,"default","","",130,[[],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"default","","",132,[[],["self"]]],[11,"default","","",133,[[],["self"]]],[11,"default","","",134,[[],["self"]]],[11,"default","","",135,[[],["self"]]],[11,"default","","",136,[[],["self"]]],[11,"default","","",137,[[],["self"]]],[11,"default","","",138,[[],["self"]]],[11,"default","","",139,[[],["self"]]],[11,"default","","",140,[[],["self"]]],[11,"default","","",141,[[],["self"]]],[11,"default","","",142,[[],["self"]]],[11,"default","","",143,[[],["self"]]],[11,"default","","",144,[[],["self"]]],[11,"default","","",145,[[],["self"]]],[11,"default","","",146,[[],["self"]]],[11,"default","","",147,[[],["self"]]],[11,"default","","",148,[[],["self"]]],[11,"default","","",149,[[],["self"]]],[11,"default","","",150,[[],["self"]]],[11,"default","","",151,[[],["self"]]],[11,"default","","",152,[[],["self"]]],[11,"default","","",153,[[],["self"]]],[11,"default","","",154,[[],["self"]]],[11,"default","","",155,[[],["self"]]],[11,"default","","",156,[[],["self"]]],[11,"default","","",157,[[],["self"]]],[11,"default","","",158,[[],["self"]]],[11,"default","","",159,[[],["self"]]],[11,"default","","",160,[[],["self"]]],[11,"default","","",161,[[],["self"]]],[11,"default","","",162,[[],["self"]]],[11,"default","","",163,[[],["self"]]],[11,"default","","",164,[[],["self"]]],[11,"default","","",165,[[],["self"]]],[11,"default","","",166,[[],["self"]]],[11,"default","","",167,[[],["self"]]],[11,"default","","",168,[[],["self"]]],[11,"default","","",169,[[],["self"]]],[11,"default","","",170,[[],["self"]]],[11,"default","","",171,[[],["self"]]],[11,"default","","",172,[[],["self"]]],[11,"default","","",173,[[],["self"]]],[11,"default","","",174,[[],["self"]]],[11,"default","","",175,[[],["self"]]],[11,"default","","",176,[[],["self"]]],[11,"default","","",177,[[],["self"]]],[11,"default","","",178,[[],["self"]]],[11,"default","","",179,[[],["self"]]],[11,"default","","",180,[[],["self"]]],[11,"default","","",181,[[],["self"]]],[11,"default","","",182,[[],["self"]]],[11,"default","","",183,[[],["self"]]],[11,"default","syn","",22,[[],["generics"]]],[11,"default","","",20,[[],["boundlifetimes"]]],[11,"default","","",92,[[],["self"]]],[11,"default","syn::punctuated","",190,[[],["self"]]],[11,"eq","syn::token","",93,[[["self"],["add"]],["bool"]]],[11,"eq","","",94,[[["self"],["addeq"]],["bool"]]],[11,"eq","","",95,[[["self"],["and"]],["bool"]]],[11,"eq","","",96,[[["self"],["andand"]],["bool"]]],[11,"eq","","",97,[[["self"],["andeq"]],["bool"]]],[11,"eq","","",98,[[["self"],["at"]],["bool"]]],[11,"eq","","",99,[[["self"],["bang"]],["bool"]]],[11,"eq","","",100,[[["self"],["caret"]],["bool"]]],[11,"eq","","",101,[[["self"],["careteq"]],["bool"]]],[11,"eq","","",102,[[["self"],["colon"]],["bool"]]],[11,"eq","","",103,[[["self"],["colon2"]],["bool"]]],[11,"eq","","",104,[[["self"],["comma"]],["bool"]]],[11,"eq","","",105,[[["self"],["div"]],["bool"]]],[11,"eq","","",106,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",107,[[["self"],["dot"]],["bool"]]],[11,"eq","","",108,[[["self"],["dot2"]],["bool"]]],[11,"eq","","",109,[[["self"],["dot3"]],["bool"]]],[11,"eq","","",110,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","","",111,[[["self"],["eq"]],["bool"]]],[11,"eq","","",112,[[["self"],["eqeq"]],["bool"]]],[11,"eq","","",113,[[["self"],["ge"]],["bool"]]],[11,"eq","","",114,[[["self"],["gt"]],["bool"]]],[11,"eq","","",115,[[["self"],["le"]],["bool"]]],[11,"eq","","",116,[[["self"],["lt"]],["bool"]]],[11,"eq","","",117,[[["self"],["muleq"]],["bool"]]],[11,"eq","","",118,[[["self"],["ne"]],["bool"]]],[11,"eq","","",119,[[["self"],["or"]],["bool"]]],[11,"eq","","",120,[[["self"],["oreq"]],["bool"]]],[11,"eq","","",121,[[["self"],["oror"]],["bool"]]],[11,"eq","","",122,[[["self"],["pound"]],["bool"]]],[11,"eq","","",123,[[["self"],["question"]],["bool"]]],[11,"eq","","",124,[[["self"],["rarrow"]],["bool"]]],[11,"eq","","",125,[[["self"],["larrow"]],["bool"]]],[11,"eq","","",126,[[["self"],["rem"]],["bool"]]],[11,"eq","","",127,[[["self"],["remeq"]],["bool"]]],[11,"eq","","",128,[[["self"],["rocket"]],["bool"]]],[11,"eq","","",129,[[["self"],["semi"]],["bool"]]],[11,"eq","","",130,[[["self"],["shl"]],["bool"]]],[11,"eq","","",131,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",132,[[["self"],["shr"]],["bool"]]],[11,"eq","","",133,[[["self"],["shreq"]],["bool"]]],[11,"eq","","",134,[[["self"],["star"]],["bool"]]],[11,"eq","","",135,[[["self"],["sub"]],["bool"]]],[11,"eq","","",136,[[["self"],["subeq"]],["bool"]]],[11,"eq","","",137,[[["self"],["underscore"]],["bool"]]],[11,"eq","","",138,[[["self"],["brace"]],["bool"]]],[11,"eq","","",139,[[["self"],["bracket"]],["bool"]]],[11,"eq","","",140,[[["self"],["paren"]],["bool"]]],[11,"eq","","",141,[[["self"],["group"]],["bool"]]],[11,"eq","","",142,[[["self"],["as"]],["bool"]]],[11,"eq","","",143,[[["self"],["auto"]],["bool"]]],[11,"eq","","",144,[[["self"],["box"]],["bool"]]],[11,"eq","","",145,[[["self"],["break"]],["bool"]]],[11,"eq","","",146,[[["self"],["capself"]],["bool"]]],[11,"eq","","",147,[[["self"],["catch"]],["bool"]]],[11,"eq","","",148,[[["self"],["const"]],["bool"]]],[11,"eq","","",149,[[["self"],["continue"]],["bool"]]],[11,"eq","","",150,[[["self"],["crate"]],["bool"]]],[11,"eq","","",151,[[["self"],["default"]],["bool"]]],[11,"eq","","",152,[[["self"],["do"]],["bool"]]],[11,"eq","","",153,[[["self"],["dyn"]],["bool"]]],[11,"eq","","",154,[[["self"],["else"]],["bool"]]],[11,"eq","","",155,[[["self"],["enum"]],["bool"]]],[11,"eq","","",156,[[["self"],["extern"]],["bool"]]],[11,"eq","","",157,[[["self"],["fn"]],["bool"]]],[11,"eq","","",158,[[["self"],["for"]],["bool"]]],[11,"eq","","",159,[[["self"],["if"]],["bool"]]],[11,"eq","","",160,[[["self"],["impl"]],["bool"]]],[11,"eq","","",161,[[["self"],["in"]],["bool"]]],[11,"eq","","",162,[[["self"],["let"]],["bool"]]],[11,"eq","","",163,[[["self"],["loop"]],["bool"]]],[11,"eq","","",164,[[["self"],["macro"]],["bool"]]],[11,"eq","","",165,[[["self"],["match"]],["bool"]]],[11,"eq","","",166,[[["self"],["mod"]],["bool"]]],[11,"eq","","",167,[[["self"],["move"]],["bool"]]],[11,"eq","","",168,[[["self"],["mut"]],["bool"]]],[11,"eq","","",169,[[["self"],["pub"]],["bool"]]],[11,"eq","","",170,[[["self"],["ref"]],["bool"]]],[11,"eq","","",171,[[["self"],["return"]],["bool"]]],[11,"eq","","",172,[[["self"],["self_"]],["bool"]]],[11,"eq","","",173,[[["self"],["static"]],["bool"]]],[11,"eq","","",174,[[["self"],["struct"]],["bool"]]],[11,"eq","","",175,[[["self"],["super"]],["bool"]]],[11,"eq","","",176,[[["self"],["trait"]],["bool"]]],[11,"eq","","",177,[[["self"],["type"]],["bool"]]],[11,"eq","","",178,[[["self"],["union"]],["bool"]]],[11,"eq","","",179,[[["self"],["unsafe"]],["bool"]]],[11,"eq","","",180,[[["self"],["use"]],["bool"]]],[11,"eq","","",181,[[["self"],["where"]],["bool"]]],[11,"eq","","",182,[[["self"],["while"]],["bool"]]],[11,"eq","","",183,[[["self"],["yield"]],["bool"]]],[11,"eq","syn","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",69,[[["self"],["attrstyle"]],["bool"]]],[11,"ne","","",69,[[["self"],["attrstyle"]],["bool"]]],[11,"eq","","",70,[[["self"],["meta"]],["bool"]]],[11,"ne","","",70,[[["self"],["meta"]],["bool"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"ne","","",2,[[["self"],["metanamevalue"]],["bool"]]],[11,"eq","","",71,[[["self"],["nestedmeta"]],["bool"]]],[11,"ne","","",71,[[["self"],["nestedmeta"]],["bool"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"eq","","",72,[[["self"],["fields"]],["bool"]]],[11,"ne","","",72,[[["self"],["fields"]],["bool"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"eq","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"ne","","",5,[[["self"],["fieldsunnamed"]],["bool"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"eq","","",73,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",73,[[["self"],["visibility"]],["bool"]]],[11,"eq","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"ne","","",8,[[["self"],["vispublic"]],["bool"]]],[11,"eq","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"ne","","",7,[[["self"],["viscrate"]],["bool"]]],[11,"eq","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"ne","","",9,[[["self"],["visrestricted"]],["bool"]]],[11,"eq","","",74,[[["self"],["expr"]],["bool"]]],[11,"ne","","",74,[[["self"],["expr"]],["bool"]]],[11,"eq","","",197,[[["self"],["exprbox"]],["bool"]]],[11,"ne","","",197,[[["self"],["exprbox"]],["bool"]]],[11,"eq","","",207,[[["self"],["exprinplace"]],["bool"]]],[11,"ne","","",207,[[["self"],["exprinplace"]],["bool"]]],[11,"eq","","",193,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",193,[[["self"],["exprarray"]],["bool"]]],[11,"eq","","",11,[[["self"],["exprcall"]],["bool"]]],[11,"ne","","",11,[[["self"],["exprcall"]],["bool"]]],[11,"eq","","",211,[[["self"],["exprmethodcall"]],["bool"]]],[11,"ne","","",211,[[["self"],["exprmethodcall"]],["bool"]]],[11,"eq","","",217,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",217,[[["self"],["exprtuple"]],["bool"]]],[11,"eq","","",10,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",10,[[["self"],["exprbinary"]],["bool"]]],[11,"eq","","",17,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",17,[[["self"],["exprunary"]],["bool"]]],[11,"eq","","",14,[[["self"],["exprlit"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprlit"]],["bool"]]],[11,"eq","","",12,[[["self"],["exprcast"]],["bool"]]],[11,"ne","","",12,[[["self"],["exprcast"]],["bool"]]],[11,"eq","","",218,[[["self"],["exprtype"]],["bool"]]],[11,"ne","","",218,[[["self"],["exprtype"]],["bool"]]],[11,"eq","","",205,[[["self"],["exprif"]],["bool"]]],[11,"ne","","",205,[[["self"],["exprif"]],["bool"]]],[11,"eq","","",206,[[["self"],["expriflet"]],["bool"]]],[11,"ne","","",206,[[["self"],["expriflet"]],["bool"]]],[11,"eq","","",220,[[["self"],["exprwhile"]],["bool"]]],[11,"ne","","",220,[[["self"],["exprwhile"]],["bool"]]],[11,"eq","","",221,[[["self"],["exprwhilelet"]],["bool"]]],[11,"ne","","",221,[[["self"],["exprwhilelet"]],["bool"]]],[11,"eq","","",203,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",203,[[["self"],["exprforloop"]],["bool"]]],[11,"eq","","",208,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",208,[[["self"],["exprloop"]],["bool"]]],[11,"eq","","",210,[[["self"],["exprmatch"]],["bool"]]],[11,"ne","","",210,[[["self"],["exprmatch"]],["bool"]]],[11,"eq","","",200,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",200,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",219,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",219,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","","",196,[[["self"],["exprblock"]],["bool"]]],[11,"ne","","",196,[[["self"],["exprblock"]],["bool"]]],[11,"eq","","",194,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",194,[[["self"],["exprassign"]],["bool"]]],[11,"eq","","",195,[[["self"],["exprassignop"]],["bool"]]],[11,"ne","","",195,[[["self"],["exprassignop"]],["bool"]]],[11,"eq","","",202,[[["self"],["exprfield"]],["bool"]]],[11,"ne","","",202,[[["self"],["exprfield"]],["bool"]]],[11,"eq","","",13,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",13,[[["self"],["exprindex"]],["bool"]]],[11,"eq","","",212,[[["self"],["exprrange"]],["bool"]]],[11,"ne","","",212,[[["self"],["exprrange"]],["bool"]]],[11,"eq","","",16,[[["self"],["exprpath"]],["bool"]]],[11,"ne","","",16,[[["self"],["exprpath"]],["bool"]]],[11,"eq","","",192,[[["self"],["expraddrof"]],["bool"]]],[11,"ne","","",192,[[["self"],["expraddrof"]],["bool"]]],[11,"eq","","",198,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",198,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",201,[[["self"],["exprcontinue"]],["bool"]]],[11,"ne","","",201,[[["self"],["exprcontinue"]],["bool"]]],[11,"eq","","",214,[[["self"],["exprreturn"]],["bool"]]],[11,"ne","","",214,[[["self"],["exprreturn"]],["bool"]]],[11,"eq","","",209,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",209,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","","",215,[[["self"],["exprstruct"]],["bool"]]],[11,"ne","","",215,[[["self"],["exprstruct"]],["bool"]]],[11,"eq","","",213,[[["self"],["exprrepeat"]],["bool"]]],[11,"ne","","",213,[[["self"],["exprrepeat"]],["bool"]]],[11,"eq","","",15,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",204,[[["self"],["exprgroup"]],["bool"]]],[11,"ne","","",204,[[["self"],["exprgroup"]],["bool"]]],[11,"eq","","",216,[[["self"],["exprtry"]],["bool"]]],[11,"ne","","",216,[[["self"],["exprtry"]],["bool"]]],[11,"eq","","",199,[[["self"],["exprcatch"]],["bool"]]],[11,"ne","","",199,[[["self"],["exprcatch"]],["bool"]]],[11,"eq","","",222,[[["self"],["expryield"]],["bool"]]],[11,"ne","","",222,[[["self"],["expryield"]],["bool"]]],[11,"eq","","",18,[[["self"],["self"]],["bool"]]],[11,"eq","","",75,[[["self"],["member"]],["bool"]]],[11,"ne","","",75,[[["self"],["member"]],["bool"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["generics"]],["bool"]]],[11,"ne","","",22,[[["self"],["generics"]],["bool"]]],[11,"eq","","",76,[[["self"],["genericparam"]],["bool"]]],[11,"ne","","",76,[[["self"],["genericparam"]],["bool"]]],[11,"eq","","",28,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",28,[[["self"],["typeparam"]],["bool"]]],[11,"eq","","",23,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",23,[[["self"],["lifetimedef"]],["bool"]]],[11,"eq","","",21,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",21,[[["self"],["constparam"]],["bool"]]],[11,"eq","","",223,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",223,[[["self"],["implgenerics"]],["bool"]]],[11,"eq","","",184,[[["self"],["typegenerics"]],["bool"]]],[11,"ne","","",184,[[["self"],["typegenerics"]],["bool"]]],[11,"eq","","",224,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",224,[[["self"],["turbofish"]],["bool"]]],[11,"eq","","",20,[[["self"],["boundlifetimes"]],["bool"]]],[11,"ne","","",20,[[["self"],["boundlifetimes"]],["bool"]]],[11,"eq","","",78,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",78,[[["self"],["typeparambound"]],["bool"]]],[11,"eq","","",27,[[["self"],["traitbound"]],["bool"]]],[11,"ne","","",27,[[["self"],["traitbound"]],["bool"]]],[11,"eq","","",77,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"ne","","",77,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"eq","","",29,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",29,[[["self"],["whereclause"]],["bool"]]],[11,"eq","","",79,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",79,[[["self"],["wherepredicate"]],["bool"]]],[11,"eq","","",26,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",26,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",25,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",25,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",24,[[["self"],["predicateeq"]],["bool"]]],[11,"ne","","",24,[[["self"],["predicateeq"]],["bool"]]],[11,"eq","","",30,[[["self"],["t"]],["bool"]]],[11,"eq","","",31,[[["self"],["lifetime"]],["bool"]]],[11,"eq","","",82,[[["self"],["lit"]],["bool"]]],[11,"ne","","",82,[[["self"],["lit"]],["bool"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"eq","","",35,[[["self"],["self"]],["bool"]]],[11,"eq","","",37,[[["self"],["self"]],["bool"]]],[11,"eq","","",36,[[["self"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"eq","","",83,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",83,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",81,[[["self"],["intsuffix"]],["bool"]]],[11,"eq","","",80,[[["self"],["floatsuffix"]],["bool"]]],[11,"eq","","",84,[[["self"],["macrodelimiter"]],["bool"]]],[11,"ne","","",84,[[["self"],["macrodelimiter"]],["bool"]]],[11,"eq","","",40,[[["self"],["self"]],["bool"]]],[11,"eq","","",44,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",44,[[["self"],["deriveinput"]],["bool"]]],[11,"eq","","",85,[[["self"],["data"]],["bool"]]],[11,"ne","","",85,[[["self"],["data"]],["bool"]]],[11,"eq","","",42,[[["self"],["datastruct"]],["bool"]]],[11,"ne","","",42,[[["self"],["datastruct"]],["bool"]]],[11,"eq","","",41,[[["self"],["dataenum"]],["bool"]]],[11,"ne","","",41,[[["self"],["dataenum"]],["bool"]]],[11,"eq","","",43,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",43,[[["self"],["dataunion"]],["bool"]]],[11,"eq","","",86,[[["self"],["binop"]],["bool"]]],[11,"ne","","",86,[[["self"],["binop"]],["bool"]]],[11,"eq","","",87,[[["self"],["unop"]],["bool"]]],[11,"ne","","",87,[[["self"],["unop"]],["bool"]]],[11,"eq","","",90,[[["self"],["type"]],["bool"]]],[11,"ne","","",90,[[["self"],["type"]],["bool"]]],[11,"eq","","",58,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",58,[[["self"],["typeslice"]],["bool"]]],[11,"eq","","",47,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",47,[[["self"],["typearray"]],["bool"]]],[11,"eq","","",56,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",56,[[["self"],["typeptr"]],["bool"]]],[11,"eq","","",57,[[["self"],["typereference"]],["bool"]]],[11,"ne","","",57,[[["self"],["typereference"]],["bool"]]],[11,"eq","","",48,[[["self"],["typebarefn"]],["bool"]]],[11,"ne","","",48,[[["self"],["typebarefn"]],["bool"]]],[11,"eq","","",53,[[["self"],["typenever"]],["bool"]]],[11,"ne","","",53,[[["self"],["typenever"]],["bool"]]],[11,"eq","","",60,[[["self"],["typetuple"]],["bool"]]],[11,"ne","","",60,[[["self"],["typetuple"]],["bool"]]],[11,"eq","","",55,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",55,[[["self"],["typepath"]],["bool"]]],[11,"eq","","",59,[[["self"],["typetraitobject"]],["bool"]]],[11,"ne","","",59,[[["self"],["typetraitobject"]],["bool"]]],[11,"eq","","",50,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",50,[[["self"],["typeimpltrait"]],["bool"]]],[11,"eq","","",54,[[["self"],["typeparen"]],["bool"]]],[11,"ne","","",54,[[["self"],["typeparen"]],["bool"]]],[11,"eq","","",49,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",49,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",51,[[["self"],["typeinfer"]],["bool"]]],[11,"ne","","",51,[[["self"],["typeinfer"]],["bool"]]],[11,"eq","","",52,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",52,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",61,[[["self"],["self"]],["bool"]]],[11,"eq","","",45,[[["self"],["abi"]],["bool"]]],[11,"ne","","",45,[[["self"],["abi"]],["bool"]]],[11,"eq","","",46,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",46,[[["self"],["barefnarg"]],["bool"]]],[11,"eq","","",88,[[["self"],["barefnargname"]],["bool"]]],[11,"ne","","",88,[[["self"],["barefnargname"]],["bool"]]],[11,"eq","","",89,[[["self"],["returntype"]],["bool"]]],[11,"ne","","",89,[[["self"],["returntype"]],["bool"]]],[11,"eq","","",65,[[["self"],["path"]],["bool"]]],[11,"ne","","",65,[[["self"],["path"]],["bool"]]],[11,"eq","","",68,[[["self"],["pathtokens"]],["bool"]]],[11,"ne","","",68,[[["self"],["pathtokens"]],["bool"]]],[11,"eq","","",66,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",66,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",92,[[["self"],["patharguments"]],["bool"]]],[11,"ne","","",92,[[["self"],["patharguments"]],["bool"]]],[11,"eq","","",91,[[["self"],["genericargument"]],["bool"]]],[11,"ne","","",91,[[["self"],["genericargument"]],["bool"]]],[11,"eq","","",62,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",62,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"eq","","",63,[[["self"],["binding"]],["bool"]]],[11,"ne","","",63,[[["self"],["binding"]],["bool"]]],[11,"eq","","",64,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",64,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","","",67,[[["self"],["qself"]],["bool"]]],[11,"ne","","",67,[[["self"],["qself"]],["bool"]]],[11,"eq","syn::buffer","",186,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",186,[[["self"],["cursor"]],["bool"]]],[11,"eq","syn::punctuated","",190,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",190,[[["self"],["punctuated"]],["bool"]]],[11,"into_iter","","",190,N],[11,"cmp","syn","",30,[[["self"],["ident"]],["ordering"]]],[11,"cmp","","",31,[[["self"],["lifetime"]],["ordering"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::synom","",225,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::token","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",138,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",146,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",147,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",148,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",149,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",150,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",151,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",152,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",153,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",155,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",156,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",157,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",158,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",159,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",160,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",163,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",164,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",165,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",166,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",167,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",168,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",169,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",170,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",172,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",173,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",174,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",175,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",176,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",177,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",178,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::punctuated","",190,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::synom","",225,[[["self"],["formatter"]],["result"]]],[11,"index","syn::punctuated","",190,N],[11,"index_mut","","",190,N],[11,"hash","syn::token","",93,[[["self"],["h"]]]],[11,"hash","","",94,[[["self"],["h"]]]],[11,"hash","","",95,[[["self"],["h"]]]],[11,"hash","","",96,[[["self"],["h"]]]],[11,"hash","","",97,[[["self"],["h"]]]],[11,"hash","","",98,[[["self"],["h"]]]],[11,"hash","","",99,[[["self"],["h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"hash","","",102,[[["self"],["h"]]]],[11,"hash","","",103,[[["self"],["h"]]]],[11,"hash","","",104,[[["self"],["h"]]]],[11,"hash","","",105,[[["self"],["h"]]]],[11,"hash","","",106,[[["self"],["h"]]]],[11,"hash","","",107,[[["self"],["h"]]]],[11,"hash","","",108,[[["self"],["h"]]]],[11,"hash","","",109,[[["self"],["h"]]]],[11,"hash","","",110,[[["self"],["h"]]]],[11,"hash","","",111,[[["self"],["h"]]]],[11,"hash","","",112,[[["self"],["h"]]]],[11,"hash","","",113,[[["self"],["h"]]]],[11,"hash","","",114,[[["self"],["h"]]]],[11,"hash","","",115,[[["self"],["h"]]]],[11,"hash","","",116,[[["self"],["h"]]]],[11,"hash","","",117,[[["self"],["h"]]]],[11,"hash","","",118,[[["self"],["h"]]]],[11,"hash","","",119,[[["self"],["h"]]]],[11,"hash","","",120,[[["self"],["h"]]]],[11,"hash","","",121,[[["self"],["h"]]]],[11,"hash","","",122,[[["self"],["h"]]]],[11,"hash","","",123,[[["self"],["h"]]]],[11,"hash","","",124,[[["self"],["h"]]]],[11,"hash","","",125,[[["self"],["h"]]]],[11,"hash","","",126,[[["self"],["h"]]]],[11,"hash","","",127,[[["self"],["h"]]]],[11,"hash","","",128,[[["self"],["h"]]]],[11,"hash","","",129,[[["self"],["h"]]]],[11,"hash","","",130,[[["self"],["h"]]]],[11,"hash","","",131,[[["self"],["h"]]]],[11,"hash","","",132,[[["self"],["h"]]]],[11,"hash","","",133,[[["self"],["h"]]]],[11,"hash","","",134,[[["self"],["h"]]]],[11,"hash","","",135,[[["self"],["h"]]]],[11,"hash","","",136,[[["self"],["h"]]]],[11,"hash","","",137,[[["self"],["h"]]]],[11,"hash","","",138,[[["self"],["h"]]]],[11,"hash","","",139,[[["self"],["h"]]]],[11,"hash","","",140,[[["self"],["h"]]]],[11,"hash","","",141,[[["self"],["h"]]]],[11,"hash","","",142,[[["self"],["h"]]]],[11,"hash","","",143,[[["self"],["h"]]]],[11,"hash","","",144,[[["self"],["h"]]]],[11,"hash","","",145,[[["self"],["h"]]]],[11,"hash","","",146,[[["self"],["h"]]]],[11,"hash","","",147,[[["self"],["h"]]]],[11,"hash","","",148,[[["self"],["h"]]]],[11,"hash","","",149,[[["self"],["h"]]]],[11,"hash","","",150,[[["self"],["h"]]]],[11,"hash","","",151,[[["self"],["h"]]]],[11,"hash","","",152,[[["self"],["h"]]]],[11,"hash","","",153,[[["self"],["h"]]]],[11,"hash","","",154,[[["self"],["h"]]]],[11,"hash","","",155,[[["self"],["h"]]]],[11,"hash","","",156,[[["self"],["h"]]]],[11,"hash","","",157,[[["self"],["h"]]]],[11,"hash","","",158,[[["self"],["h"]]]],[11,"hash","","",159,[[["self"],["h"]]]],[11,"hash","","",160,[[["self"],["h"]]]],[11,"hash","","",161,[[["self"],["h"]]]],[11,"hash","","",162,[[["self"],["h"]]]],[11,"hash","","",163,[[["self"],["h"]]]],[11,"hash","","",164,[[["self"],["h"]]]],[11,"hash","","",165,[[["self"],["h"]]]],[11,"hash","","",166,[[["self"],["h"]]]],[11,"hash","","",167,[[["self"],["h"]]]],[11,"hash","","",168,[[["self"],["h"]]]],[11,"hash","","",169,[[["self"],["h"]]]],[11,"hash","","",170,[[["self"],["h"]]]],[11,"hash","","",171,[[["self"],["h"]]]],[11,"hash","","",172,[[["self"],["h"]]]],[11,"hash","","",173,[[["self"],["h"]]]],[11,"hash","","",174,[[["self"],["h"]]]],[11,"hash","","",175,[[["self"],["h"]]]],[11,"hash","","",176,[[["self"],["h"]]]],[11,"hash","","",177,[[["self"],["h"]]]],[11,"hash","","",178,[[["self"],["h"]]]],[11,"hash","","",179,[[["self"],["h"]]]],[11,"hash","","",180,[[["self"],["h"]]]],[11,"hash","","",181,[[["self"],["h"]]]],[11,"hash","","",182,[[["self"],["h"]]]],[11,"hash","","",183,[[["self"],["h"]]]],[11,"hash","syn","",0,[[["self"],["h"]]]],[11,"hash","","",69,N],[11,"hash","","",70,N],[11,"hash","","",1,N],[11,"hash","","",2,N],[11,"hash","","",71,N],[11,"hash","","",6,N],[11,"hash","","",72,N],[11,"hash","","",4,N],[11,"hash","","",5,N],[11,"hash","","",3,N],[11,"hash","","",73,N],[11,"hash","","",8,N],[11,"hash","","",7,N],[11,"hash","","",9,N],[11,"hash","","",74,N],[11,"hash","","",197,N],[11,"hash","","",207,N],[11,"hash","","",193,N],[11,"hash","","",11,N],[11,"hash","","",211,N],[11,"hash","","",217,N],[11,"hash","","",10,N],[11,"hash","","",17,N],[11,"hash","","",14,N],[11,"hash","","",12,N],[11,"hash","","",218,N],[11,"hash","","",205,N],[11,"hash","","",206,N],[11,"hash","","",220,N],[11,"hash","","",221,N],[11,"hash","","",203,N],[11,"hash","","",208,N],[11,"hash","","",210,N],[11,"hash","","",200,N],[11,"hash","","",219,N],[11,"hash","","",196,N],[11,"hash","","",194,N],[11,"hash","","",195,N],[11,"hash","","",202,N],[11,"hash","","",13,N],[11,"hash","","",212,N],[11,"hash","","",16,N],[11,"hash","","",192,N],[11,"hash","","",198,N],[11,"hash","","",201,N],[11,"hash","","",214,N],[11,"hash","","",209,N],[11,"hash","","",215,N],[11,"hash","","",213,N],[11,"hash","","",15,N],[11,"hash","","",204,N],[11,"hash","","",216,N],[11,"hash","","",199,N],[11,"hash","","",222,N],[11,"hash","","",18,[[["self"],["h"]]]],[11,"hash","","",75,N],[11,"hash","","",19,[[["self"],["h"]]]],[11,"hash","","",22,N],[11,"hash","","",76,N],[11,"hash","","",28,N],[11,"hash","","",23,N],[11,"hash","","",21,N],[11,"hash","","",223,N],[11,"hash","","",184,N],[11,"hash","","",224,N],[11,"hash","","",20,N],[11,"hash","","",78,N],[11,"hash","","",27,N],[11,"hash","","",77,N],[11,"hash","","",29,N],[11,"hash","","",79,N],[11,"hash","","",26,N],[11,"hash","","",25,N],[11,"hash","","",24,N],[11,"hash","","",30,[[["self"],["h"]]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"hash","","",82,N],[11,"hash","","",38,[[["self"],["h"]]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"hash","","",33,[[["self"],["h"]]]],[11,"hash","","",35,[[["self"],["h"]]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"hash","","",36,[[["self"],["h"]]]],[11,"hash","","",32,[[["self"],["h"]]]],[11,"hash","","",39,[[["self"],["h"]]]],[11,"hash","","",83,N],[11,"hash","","",81,N],[11,"hash","","",80,N],[11,"hash","","",84,N],[11,"hash","","",40,[[["self"],["h"]]]],[11,"hash","","",44,N],[11,"hash","","",85,N],[11,"hash","","",42,N],[11,"hash","","",41,N],[11,"hash","","",43,N],[11,"hash","","",86,N],[11,"hash","","",87,N],[11,"hash","","",90,N],[11,"hash","","",58,N],[11,"hash","","",47,N],[11,"hash","","",56,N],[11,"hash","","",57,N],[11,"hash","","",48,N],[11,"hash","","",53,N],[11,"hash","","",60,N],[11,"hash","","",55,N],[11,"hash","","",59,N],[11,"hash","","",50,N],[11,"hash","","",54,N],[11,"hash","","",49,N],[11,"hash","","",51,N],[11,"hash","","",52,N],[11,"hash","","",61,[[["self"],["h"]]]],[11,"hash","","",45,N],[11,"hash","","",46,N],[11,"hash","","",88,N],[11,"hash","","",89,N],[11,"hash","","",65,N],[11,"hash","","",68,N],[11,"hash","","",66,N],[11,"hash","","",92,N],[11,"hash","","",91,N],[11,"hash","","",62,N],[11,"hash","","",63,N],[11,"hash","","",64,N],[11,"hash","","",67,N],[11,"hash","syn::punctuated","",190,N],[11,"from_iter","","",190,[[["i"]],["self"]]],[11,"from_iter","","",190,[[["i"]],["self"]]],[11,"description","syn::synom","",225,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",93,[[["self"],["tokens"]]]],[11,"to_tokens","","",94,[[["self"],["tokens"]]]],[11,"to_tokens","","",95,[[["self"],["tokens"]]]],[11,"to_tokens","","",96,[[["self"],["tokens"]]]],[11,"to_tokens","","",97,[[["self"],["tokens"]]]],[11,"to_tokens","","",98,[[["self"],["tokens"]]]],[11,"to_tokens","","",99,[[["self"],["tokens"]]]],[11,"to_tokens","","",100,[[["self"],["tokens"]]]],[11,"to_tokens","","",101,[[["self"],["tokens"]]]],[11,"to_tokens","","",102,[[["self"],["tokens"]]]],[11,"to_tokens","","",103,[[["self"],["tokens"]]]],[11,"to_tokens","","",104,[[["self"],["tokens"]]]],[11,"to_tokens","","",105,[[["self"],["tokens"]]]],[11,"to_tokens","","",106,[[["self"],["tokens"]]]],[11,"to_tokens","","",107,[[["self"],["tokens"]]]],[11,"to_tokens","","",108,[[["self"],["tokens"]]]],[11,"to_tokens","","",109,[[["self"],["tokens"]]]],[11,"to_tokens","","",110,[[["self"],["tokens"]]]],[11,"to_tokens","","",111,[[["self"],["tokens"]]]],[11,"to_tokens","","",112,[[["self"],["tokens"]]]],[11,"to_tokens","","",113,[[["self"],["tokens"]]]],[11,"to_tokens","","",114,[[["self"],["tokens"]]]],[11,"to_tokens","","",115,[[["self"],["tokens"]]]],[11,"to_tokens","","",116,[[["self"],["tokens"]]]],[11,"to_tokens","","",117,[[["self"],["tokens"]]]],[11,"to_tokens","","",118,[[["self"],["tokens"]]]],[11,"to_tokens","","",119,[[["self"],["tokens"]]]],[11,"to_tokens","","",120,[[["self"],["tokens"]]]],[11,"to_tokens","","",121,[[["self"],["tokens"]]]],[11,"to_tokens","","",122,[[["self"],["tokens"]]]],[11,"to_tokens","","",123,[[["self"],["tokens"]]]],[11,"to_tokens","","",124,[[["self"],["tokens"]]]],[11,"to_tokens","","",125,[[["self"],["tokens"]]]],[11,"to_tokens","","",126,[[["self"],["tokens"]]]],[11,"to_tokens","","",127,[[["self"],["tokens"]]]],[11,"to_tokens","","",128,[[["self"],["tokens"]]]],[11,"to_tokens","","",129,[[["self"],["tokens"]]]],[11,"to_tokens","","",130,[[["self"],["tokens"]]]],[11,"to_tokens","","",131,[[["self"],["tokens"]]]],[11,"to_tokens","","",132,[[["self"],["tokens"]]]],[11,"to_tokens","","",133,[[["self"],["tokens"]]]],[11,"to_tokens","","",134,[[["self"],["tokens"]]]],[11,"to_tokens","","",135,[[["self"],["tokens"]]]],[11,"to_tokens","","",136,[[["self"],["tokens"]]]],[11,"to_tokens","","",137,[[["self"],["tokens"]]]],[11,"to_tokens","","",142,[[["self"],["tokens"]]]],[11,"to_tokens","","",143,[[["self"],["tokens"]]]],[11,"to_tokens","","",144,[[["self"],["tokens"]]]],[11,"to_tokens","","",145,[[["self"],["tokens"]]]],[11,"to_tokens","","",146,[[["self"],["tokens"]]]],[11,"to_tokens","","",147,[[["self"],["tokens"]]]],[11,"to_tokens","","",148,[[["self"],["tokens"]]]],[11,"to_tokens","","",149,[[["self"],["tokens"]]]],[11,"to_tokens","","",150,[[["self"],["tokens"]]]],[11,"to_tokens","","",151,[[["self"],["tokens"]]]],[11,"to_tokens","","",152,[[["self"],["tokens"]]]],[11,"to_tokens","","",153,[[["self"],["tokens"]]]],[11,"to_tokens","","",154,[[["self"],["tokens"]]]],[11,"to_tokens","","",155,[[["self"],["tokens"]]]],[11,"to_tokens","","",156,[[["self"],["tokens"]]]],[11,"to_tokens","","",157,[[["self"],["tokens"]]]],[11,"to_tokens","","",158,[[["self"],["tokens"]]]],[11,"to_tokens","","",159,[[["self"],["tokens"]]]],[11,"to_tokens","","",160,[[["self"],["tokens"]]]],[11,"to_tokens","","",161,[[["self"],["tokens"]]]],[11,"to_tokens","","",162,[[["self"],["tokens"]]]],[11,"to_tokens","","",163,[[["self"],["tokens"]]]],[11,"to_tokens","","",164,[[["self"],["tokens"]]]],[11,"to_tokens","","",165,[[["self"],["tokens"]]]],[11,"to_tokens","","",166,[[["self"],["tokens"]]]],[11,"to_tokens","","",167,[[["self"],["tokens"]]]],[11,"to_tokens","","",168,[[["self"],["tokens"]]]],[11,"to_tokens","","",169,[[["self"],["tokens"]]]],[11,"to_tokens","","",170,[[["self"],["tokens"]]]],[11,"to_tokens","","",171,[[["self"],["tokens"]]]],[11,"to_tokens","","",172,[[["self"],["tokens"]]]],[11,"to_tokens","","",173,[[["self"],["tokens"]]]],[11,"to_tokens","","",174,[[["self"],["tokens"]]]],[11,"to_tokens","","",175,[[["self"],["tokens"]]]],[11,"to_tokens","","",176,[[["self"],["tokens"]]]],[11,"to_tokens","","",177,[[["self"],["tokens"]]]],[11,"to_tokens","","",178,[[["self"],["tokens"]]]],[11,"to_tokens","","",179,[[["self"],["tokens"]]]],[11,"to_tokens","","",180,[[["self"],["tokens"]]]],[11,"to_tokens","","",181,[[["self"],["tokens"]]]],[11,"to_tokens","","",182,[[["self"],["tokens"]]]],[11,"to_tokens","","",183,[[["self"],["tokens"]]]],[11,"to_tokens","syn","",70,[[["self"],["tokens"]]]],[11,"to_tokens","","",71,[[["self"],["tokens"]]]],[11,"to_tokens","","",0,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",2,[[["self"],["tokens"]]]],[11,"to_tokens","","",72,[[["self"],["tokens"]]]],[11,"to_tokens","","",73,[[["self"],["tokens"]]]],[11,"to_tokens","","",6,[[["self"],["tokens"]]]],[11,"to_tokens","","",4,[[["self"],["tokens"]]]],[11,"to_tokens","","",5,[[["self"],["tokens"]]]],[11,"to_tokens","","",3,[[["self"],["tokens"]]]],[11,"to_tokens","","",8,[[["self"],["tokens"]]]],[11,"to_tokens","","",7,[[["self"],["tokens"]]]],[11,"to_tokens","","",9,[[["self"],["tokens"]]]],[11,"to_tokens","","",74,[[["self"],["tokens"]]]],[11,"to_tokens","","",11,[[["self"],["tokens"]]]],[11,"to_tokens","","",10,[[["self"],["tokens"]]]],[11,"to_tokens","","",17,[[["self"],["tokens"]]]],[11,"to_tokens","","",14,[[["self"],["tokens"]]]],[11,"to_tokens","","",12,[[["self"],["tokens"]]]],[11,"to_tokens","","",75,[[["self"],["tokens"]]]],[11,"to_tokens","","",19,[[["self"],["tokens"]]]],[11,"to_tokens","","",13,[[["self"],["tokens"]]]],[11,"to_tokens","","",16,[[["self"],["tokens"]]]],[11,"to_tokens","","",15,[[["self"],["tokens"]]]],[11,"to_tokens","","",18,[[["self"],["tokens"]]]],[11,"to_tokens","","",76,[[["self"],["tokens"]]]],[11,"to_tokens","","",78,[[["self"],["tokens"]]]],[11,"to_tokens","","",79,[[["self"],["tokens"]]]],[11,"to_tokens","","",22,[[["self"],["tokens"]]]],[11,"to_tokens","","",223,[[["self"],["tokens"]]]],[11,"to_tokens","","",184,[[["self"],["tokens"]]]],[11,"to_tokens","","",224,[[["self"],["tokens"]]]],[11,"to_tokens","","",20,[[["self"],["tokens"]]]],[11,"to_tokens","","",23,[[["self"],["tokens"]]]],[11,"to_tokens","","",28,[[["self"],["tokens"]]]],[11,"to_tokens","","",27,[[["self"],["tokens"]]]],[11,"to_tokens","","",77,[[["self"],["tokens"]]]],[11,"to_tokens","","",21,[[["self"],["tokens"]]]],[11,"to_tokens","","",29,[[["self"],["tokens"]]]],[11,"to_tokens","","",26,[[["self"],["tokens"]]]],[11,"to_tokens","","",25,[[["self"],["tokens"]]]],[11,"to_tokens","","",24,[[["self"],["tokens"]]]],[11,"to_tokens","","",30,[[["self"],["tokens"]]]],[11,"to_tokens","","",31,[[["self"],["tokens"]]]],[11,"to_tokens","","",82,[[["self"],["tokens"]]]],[11,"to_tokens","","",38,[[["self"],["tokens"]]]],[11,"to_tokens","","",34,[[["self"],["tokens"]]]],[11,"to_tokens","","",33,[[["self"],["tokens"]]]],[11,"to_tokens","","",35,[[["self"],["tokens"]]]],[11,"to_tokens","","",37,[[["self"],["tokens"]]]],[11,"to_tokens","","",36,[[["self"],["tokens"]]]],[11,"to_tokens","","",32,[[["self"],["tokens"]]]],[11,"to_tokens","","",39,[[["self"],["tokens"]]]],[11,"to_tokens","","",40,[[["self"],["tokens"]]]],[11,"to_tokens","","",44,[[["self"],["tokens"]]]],[11,"to_tokens","","",86,[[["self"],["tokens"]]]],[11,"to_tokens","","",87,[[["self"],["tokens"]]]],[11,"to_tokens","","",90,[[["self"],["tokens"]]]],[11,"to_tokens","","",58,[[["self"],["tokens"]]]],[11,"to_tokens","","",47,[[["self"],["tokens"]]]],[11,"to_tokens","","",56,[[["self"],["tokens"]]]],[11,"to_tokens","","",57,[[["self"],["tokens"]]]],[11,"to_tokens","","",48,[[["self"],["tokens"]]]],[11,"to_tokens","","",53,[[["self"],["tokens"]]]],[11,"to_tokens","","",60,[[["self"],["tokens"]]]],[11,"to_tokens","","",55,[[["self"],["tokens"]]]],[11,"to_tokens","","",59,[[["self"],["tokens"]]]],[11,"to_tokens","","",50,[[["self"],["tokens"]]]],[11,"to_tokens","","",49,[[["self"],["tokens"]]]],[11,"to_tokens","","",54,[[["self"],["tokens"]]]],[11,"to_tokens","","",51,[[["self"],["tokens"]]]],[11,"to_tokens","","",52,[[["self"],["tokens"]]]],[11,"to_tokens","","",61,[[["self"],["tokens"]]]],[11,"to_tokens","","",89,[[["self"],["tokens"]]]],[11,"to_tokens","","",46,[[["self"],["tokens"]]]],[11,"to_tokens","","",88,[[["self"],["tokens"]]]],[11,"to_tokens","","",45,[[["self"],["tokens"]]]],[11,"to_tokens","","",65,[[["self"],["tokens"]]]],[11,"to_tokens","","",66,[[["self"],["tokens"]]]],[11,"to_tokens","","",92,[[["self"],["tokens"]]]],[11,"to_tokens","","",91,[[["self"],["tokens"]]]],[11,"to_tokens","","",62,[[["self"],["tokens"]]]],[11,"to_tokens","","",63,[[["self"],["tokens"]]]],[11,"to_tokens","","",64,[[["self"],["tokens"]]]],[11,"to_tokens","","",68,[[["self"],["tokens"]]]],[11,"to_tokens","syn::punctuated","",190,[[["self"],["tokens"]]]],[11,"to_tokens","","",189,[[["self"],["tokens"]]]]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Ident"],[3,"Lifetime"],[3,"LitBool"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitChar"],[3,"LitFloat"],[3,"LitInt"],[3,"LitStr"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[3,"PathTokens"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"Rocket"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Underscore"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"TypeGenerics"],[3,"TokenBuffer"],[3,"Cursor"],[8,"Synom"],[8,"Parser"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[3,"ExprAddrOf"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCatch"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprInPlace"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"ParseError"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["void"]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
initSearch(searchIndex);
